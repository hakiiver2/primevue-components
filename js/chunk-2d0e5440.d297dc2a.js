(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0e5440"],{"946e":function(e,n,t){"use strict";t.r(n);var a=t("7a23"),o={class:"content-section introduction"},i=Object(a["m"])("div",{class:"feature-intro"},[Object(a["m"])("h1",null,[Object(a["l"])("TreeTable "),Object(a["m"])("span",null,"Paginator")]),Object(a["m"])("p",null,"Pagination is enabled by setting paginator property to true and defining the rows attribute as the number of root level nodes per page.")],-1),r={class:"content-section implementation"},l={class:"card"};function d(e,n,t,d,s,m){var c=Object(a["K"])("AppDemoActions"),u=Object(a["K"])("Column"),p=Object(a["K"])("TreeTable"),b=Object(a["K"])("AppDoc");return Object(a["C"])(),Object(a["h"])("div",null,[Object(a["m"])("div",o,[i,Object(a["m"])(c)]),Object(a["m"])("div",r,[Object(a["m"])("div",l,[Object(a["m"])(p,{value:s.nodes,paginator:!0,rows:10},{default:Object(a["U"])((function(){return[Object(a["m"])(u,{field:"name",header:"Name",expander:!0}),Object(a["m"])(u,{field:"size",header:"Size"}),Object(a["m"])(u,{field:"type",header:"Type"})]})),_:1},8,["value"])])]),Object(a["m"])(b,{name:"TreeTablePaginatorDemo",sources:s.sources,service:["NodeService"],data:["treetablenodes"],github:"treetable/TreeTablePaginatorDemo.vue"},null,8,["sources"])])}var s={data:function(){return{nodes:null,sources:{"options-api":{tabName:"Options API Source",content:'\n<template>\n    <div>\n        <TreeTable :value="nodes" :paginator="true" :rows="10">\n            <Column field="name" header="Name" :expander="true"></Column>\n            <Column field="size" header="Size"></Column>\n            <Column field="type" header="Type"></Column>\n        </TreeTable>\n    </div>                 \n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            nodes: null\n        }\n    },\n    created() {\n        let files = [];\n        for(let i = 0; i < 50; i++) {\n            let node = {\n                key: i,\n                data: {\n                    name: \'Item \' + i,\n                    size: Math.floor(Math.random() * 1000) + 1 + \'kb\',\n                    type: \'Type \' + i\n                },\n                children: [\n                    {\n                        key: i + \' - 0\',\n                        data: {\n                            name: \'Item \' + i + \' - 0\',\n                            size: Math.floor(Math.random() * 1000) + 1 + \'kb\',\n                            type: \'Type \' + i\n                        }\n                    }\n                ]\n            };\n\n            files.push(node);\n        }\n\n        this.nodes = files;\n    }\n}\n<\\/script>\n'},"composition-api":{tabName:"Composition API Source",content:'\n<template>\n    <div>\n        <TreeTable :value="nodes" :paginator="true" :rows="10">\n            <Column field="name" header="Name" :expander="true"></Column>\n            <Column field="size" header="Size"></Column>\n            <Column field="type" header="Type"></Column>\n        </TreeTable>\n    </div>                 \n</template>\n\n<script>\nimport { ref } from \'vue\';\n\nexport default {\n    setup() {\n        let files = [];\n        for(let i = 0; i < 50; i++) {\n            let node = {\n                key: i,\n                data: {\n                    name: \'Item \' + i,\n                    size: Math.floor(Math.random() * 1000) + 1 + \'kb\',\n                    type: \'Type \' + i\n                },\n                children: [\n                    {\n                        key: i + \' - 0\',\n                        data: {\n                            name: \'Item \' + i + \' - 0\',\n                            size: Math.floor(Math.random() * 1000) + 1 + \'kb\',\n                            type: \'Type \' + i\n                        }\n                    }\n                ]\n            };\n\n            files.push(node);\n        }\n\n        const nodes = ref(files);\n\n        return { nodes }\n    }\n}\n<\\/script>\n'}}}},created:function(){for(var e=[],n=0;n<50;n++){var t={key:n,data:{name:"Item "+n,size:Math.floor(1e3*Math.random())+1+"kb",type:"Type "+n},children:[{key:n+" - 0",data:{name:"Item "+n+" - 0",size:Math.floor(1e3*Math.random())+1+"kb",type:"Type "+n}}]};e.push(t)}this.nodes=e}};s.render=d;n["default"]=s}}]);