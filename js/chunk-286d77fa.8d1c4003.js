(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-286d77fa"],{"82f4":function(e,n,t){"use strict";t.d(n,"a",(function(){return a}));var l=t("d4ec"),o=t("bee2"),c=t("bc3a"),d=t.n(c),a=function(){function e(){Object(l["a"])(this,e)}return Object(o["a"])(e,[{key:"getTreeTableNodes",value:function(){return d.a.get("demo/data/treetablenodes.json").then((function(e){return e.data.root}))}},{key:"getTreeNodes",value:function(){return d.a.get("demo/data/treenodes.json").then((function(e){return e.data.root}))}}]),e}()},e344:function(e,n,t){"use strict";t.r(n);var l=t("7a23"),o={class:"content-section introduction"},c=Object(l["m"])("div",{class:"feature-intro"},[Object(l["m"])("h1",null,[Object(l["l"])("TreeTable "),Object(l["m"])("span",null,"Column Toggle")]),Object(l["m"])("p",null,"MultiSelect component can be used to implement column toggle functionality.")],-1),d={class:"content-section implementation"},a={class:"card"},u={style:{"text-align":"left"}};function i(e,n,t,i,s,r){var m=Object(l["K"])("AppDemoActions"),f=Object(l["K"])("MultiSelect"),p=Object(l["K"])("Column"),h=Object(l["K"])("TreeTable"),v=Object(l["K"])("AppDoc");return Object(l["C"])(),Object(l["h"])("div",null,[Object(l["m"])("div",o,[c,Object(l["m"])(m)]),Object(l["m"])("div",d,[Object(l["m"])("div",a,[Object(l["m"])(h,{value:s.nodes},{header:Object(l["U"])((function(){return[Object(l["m"])("div",u,[Object(l["m"])(f,{modelValue:s.selectedColumns,"onUpdate:modelValue":r.onToggle,options:s.columns,optionLabel:"header",placeholder:"Select Columns",style:{width:"20em"}},null,8,["modelValue","onUpdate:modelValue","options"])])]})),default:Object(l["U"])((function(){return[Object(l["m"])(p,{field:"name",header:"Name",expander:!0}),(Object(l["C"])(!0),Object(l["h"])(l["a"],null,Object(l["I"])(s.selectedColumns,(function(e){return Object(l["C"])(),Object(l["h"])(p,{field:e.field,header:e.header,key:e.field},null,8,["field","header"])})),128))]})),_:1},8,["value"])])]),Object(l["m"])(v,{name:"TreeTableColToggleDemo",sources:s.sources,service:["NodeService"],data:["treetablenodes"],github:"treetable/TreeTableColToggleDemo.vue"},null,8,["sources"])])}t("4de4"),t("caad"),t("2532");var s=t("82f4"),r={data:function(){return{selectedColumns:null,columns:null,nodes:null,sources:{"options-api":{tabName:"Options API Source",content:'\n<template>\n    <div>\n        <TreeTable :value="nodes">\n            <template #header>\n                <div style="text-align:left">\n                    <MultiSelect :modelValue="selectedColumns" @update:modelValue="onToggle" :options="columns" optionLabel="header" placeholder="Select Columns" style="width: 20em"/>\n                </div>\n            </template>\n            <Column field="name" header="Name" :expander="true"></Column>\n            <Column v-for="col of selectedColumns" :field="col.field" :header="col.header" :key="col.field"></Column>\n        </TreeTable>\n    </div>                    \n</template>\n\n<script>\nimport NodeService from \'./service/NodeService\';\n\nexport default {\n    data() {\n        return {\n            selectedColumns: null,\n            columns: null,\n            nodes: null,\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n\n        this.columns = [\n            {field: \'size\', header: \'Size\'},\n            {field: \'type\', header: \'Type\'}\n        ];\n\n        this.selectedColumns = this.columns;\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        onToggle(value) {\n            this.selectedColumns = this.columns.filter(col => value.includes(col));\n        }\n    }\n}\n<\\/script>\n'},"composition-api":{tabName:"Composition API Source",content:'\n<template>\n    <div>\n        <TreeTable :value="nodes">\n            <template #header>\n                <div style="text-align:left">\n                    <MultiSelect :modelValue="selectedColumns" @update:modelValue="onToggle" :options="columns" optionLabel="header" placeholder="Select Columns" style="width: 20em"/>\n                </div>\n            </template>\n            <Column field="name" header="Name" :expander="true"></Column>\n            <Column v-for="col of selectedColumns" :field="col.field" :header="col.header" :key="col.field"></Column>\n        </TreeTable>\n    </div>                    \n</template>\n\n<script>\nimport { ref, onMounted } from \'vue\';\nimport NodeService from \'./service/NodeService\';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            nodeService.value.getTreeTableNodes().then(data => nodes.value = data);\n        })\n        const columns = ref([\n            {field: \'size\', header: \'Size\'},\n            {field: \'type\', header: \'Type\'}\n        ]);\n        const nodes = ref();\n        const nodeService = ref(new NodeService());\n        const selectedColumns = ref(columns.value);\n        const onToggle = (val) => {\n            selectedColumns.value = columns.value.filter(col => val.includes(col));\n        }\n\n        return { columns, nodes, nodeService, selectedColumns, onToggle }\n    }\n}\n<\\/script>\n'}}}},nodeService:null,created:function(){this.nodeService=new s["a"],this.columns=[{field:"size",header:"Size"},{field:"type",header:"Type"}],this.selectedColumns=this.columns},mounted:function(){var e=this;this.nodeService.getTreeTableNodes().then((function(n){return e.nodes=n}))},methods:{onToggle:function(e){this.selectedColumns=this.columns.filter((function(n){return e.includes(n)}))}}};r.render=i;n["default"]=r}}]);