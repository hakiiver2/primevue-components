(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-3dfe2b5f"],{"56f6":function(e,n,t){"use strict";t.r(n);var l=t("7a23"),o=Object(l["Y"])("data-v-29a8963e");Object(l["F"])("data-v-29a8963e");var a={class:"content-section introduction"},d=Object(l["m"])("div",{class:"feature-intro"},[Object(l["m"])("h1",null,"TreeTable"),Object(l["m"])("p",null,"TreeTable is used to display hierarchical data in tabular format.")],-1),r={class:"content-section implementation"},i={class:"card"},c=Object(l["m"])("h5",null,"Basic",-1),u={class:"card"},m=Object(l["m"])("h5",null,"Dynamic Columns",-1),s={class:"card"},b=Object(l["m"])("h5",null,"Programmatic Control",-1),p={style:{"margin-bottom":"1em"}};Object(l["D"])();var O=o((function(e,n,t,O,j,h){var f=Object(l["K"])("AppDemoActions"),y=Object(l["K"])("Column"),v=Object(l["K"])("TreeTable"),g=Object(l["K"])("Button"),T=Object(l["K"])("TreeTableDoc");return Object(l["C"])(),Object(l["h"])("div",null,[Object(l["m"])("div",a,[d,Object(l["m"])(f)]),Object(l["m"])("div",r,[Object(l["m"])("div",i,[c,Object(l["m"])(v,{value:j.nodes},{default:o((function(){return[Object(l["m"])(y,{field:"name",header:"Name",expander:!0}),Object(l["m"])(y,{field:"size",header:"Size"}),Object(l["m"])(y,{field:"type",header:"Type"})]})),_:1},8,["value"])]),Object(l["m"])("div",u,[m,Object(l["m"])(v,{value:j.nodes},{default:o((function(){return[(Object(l["C"])(!0),Object(l["h"])(l["a"],null,Object(l["I"])(j.columns,(function(e){return Object(l["C"])(),Object(l["h"])(y,{key:e.field,field:e.field,header:e.header,expander:e.expander},null,8,["field","header","expander"])})),128))]})),_:1},8,["value"])]),Object(l["m"])("div",s,[b,Object(l["m"])("div",p,[Object(l["m"])(g,{type:"button",icon:"pi pi-plus",label:"Expand All",onClick:h.expandAll},null,8,["onClick"]),Object(l["m"])(g,{type:"button",icon:"pi pi-minus",label:"Collapse All",onClick:h.collapseAll},null,8,["onClick"])]),Object(l["m"])(v,{value:j.nodes,expandedKeys:j.expandedKeys},{default:o((function(){return[Object(l["m"])(y,{field:"name",header:"Name",expander:!0}),Object(l["m"])(y,{field:"size",header:"Size"}),Object(l["m"])(y,{field:"type",header:"Type"})]})),_:1},8,["value","expandedKeys"])])]),Object(l["m"])(T)])})),j=t("5530"),h=t("b85c"),f=t("82f4"),y=Object(l["m"])("h5",null,"Import",-1),v=Object(l["m"])("code",null,"\nimport TreeTable from 'primevue/treetable';\nimport Column from 'primevue/column';\n\n",-1),g=Object(l["m"])("h5",null,"Getting Started",-1),T=Object(l["m"])("p",null,[Object(l["l"])("Tree component requires an array of TreeNode objects as its "),Object(l["m"])("i",null,"value"),Object(l["l"])(" and columns defined with Column component.")],-1),C=Object(l["m"])("h5",null,"TreeNode API utilized by the TreeTable",-1),x=Object(l["m"])("div",{class:"doc-tablewrapper"},[Object(l["m"])("table",{class:"doc-table"},[Object(l["m"])("thead",null,[Object(l["m"])("tr",null,[Object(l["m"])("th",null,"Name"),Object(l["m"])("th",null,"Type"),Object(l["m"])("th",null,"Default"),Object(l["m"])("th",null,"Description")])]),Object(l["m"])("tbody",null,[Object(l["m"])("tr",null,[Object(l["m"])("td",null,"key"),Object(l["m"])("td",null,"any"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,"Mandatory unique key of the node.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"data"),Object(l["m"])("td",null,"any"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,"Data represented by the node.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"children"),Object(l["m"])("td",null,"TreeNode[]"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,"An array of treenodes as children.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"style"),Object(l["m"])("td",null,"string"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,"Inline style of the node.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"styleClass"),Object(l["m"])("td",null,"string"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,"Style class of the node.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"leaf"),Object(l["m"])("td",null,"boolean"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,"Specifies if the node has children. Used in lazy loading.")])])])],-1),w=Object(l["m"])("p",null,"Example below loads the nodes from a remote datasource via a service called NodeService.",-1),z=Object(l["m"])("code",null,[Object(l["m"])("template",null,'\n<TreeTable :value="nodes">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n'),Object(l["l"])("\n")],-1),k=Object(l["m"])("code",null,"\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            nodes: null\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => this.nodes = data);\n    }\n}\n\n",-1),S=Object(l["m"])("code",null,"\nimport axios from 'axios';\n\nexport default class NodeService {\n\n    getTreeTableNodes() {\n        return axios.get('demo/data/treetablenodes.json').then(res => res.data.root);\n    }\n\n}\n\n",-1),N=Object(l["m"])("p",null,"The json response sample would be as following.",-1),K={style:{height:"400px",overflow:"auto"}},M=Object(l["m"])("code",null,'\n{\n    "root":\n    [\n        {\n            "key": "0",\n            "data":{\n                "name":"Applications",\n                "size":"100kb",\n                "type":"Folder"\n            },\n            "children":[\n                {\n                    "key": "0-0",\n                    "data":{\n                        "name":"Vue",\n                        "size":"25kb",\n                        "type":"Folder"\n                    },\n                    "children":[\n                        {\n                            "key": "0-0-0",\n                            "data":{\n                                "name":"Vue.app",\n                                "size":"10kb",\n                                "type":"Application"\n                            }\n                        },\n                        {\n                            "key": "0-0-1",\n                            "data":{\n                                "name":"native.app",\n                                "size":"10kb",\n                                "type":"Application"\n                            }\n                        },\n                        {\n                            "key": "0-0-2",\n                            "data":{\n                                "name":"mobile.app",\n                                "size":"5kb",\n                                "type":"Application"\n                            }\n                        }\n                    ]\n                },\n                {\n                    "key": "0-1",\n                    "data":{\n                        "name":"editor.app",\n                        "size":"25kb",\n                        "type":"Application"\n                    }\n                },\n                {\n                    "key": "0-2",\n                    "data":{\n                        "name":"settings.app",\n                        "size":"50kb",\n                        "type":"Application"\n                    }\n                }\n            ]\n        },\n        {\n            "key": "1",\n            "data":{\n                "name":"Cloud",\n                "size":"20kb",\n                "type":"Folder"\n            },\n            "children":[\n                {\n                    "key": "1-0",\n                    "data":{\n                        "name":"backup-1.zip",\n                        "size":"10kb",\n                        "type":"Zip"\n                    }\n                },\n                {\n                    "key": "1-1",\n                    "data":{\n                        "name":"backup-2.zip",\n                        "size":"10kb",\n                        "type":"Zip"\n                    }\n                }\n            ]\n        },\n        {\n            "key": "2",\n            "data": {\n                "name":"Desktop",\n                "size":"150kb",\n                "type":"Folder"\n            },\n            "children":[\n                {\n                    "key": "2-0",\n                    "data":{\n                        "name":"note-meeting.txt",\n                        "size":"50kb",\n                        "type":"Text"\n                    }\n                },\n                {\n                    "key": "2-1",\n                    "data":{\n                        "name":"note-todo.txt",\n                        "size":"100kb",\n                        "type":"Text"\n                    }\n                }\n            ]\n        },\n        {\n            "key": "3",\n            "data":{\n                "name":"Documents",\n                "size":"75kb",\n                "type":"Folder"\n            },\n            "children":[\n                {\n                    "key": "3-0",\n                    "data":{\n                        "name":"Work",\n                        "size":"55kb",\n                        "type":"Folder"\n                    },\n                    "children":[\n                        {\n                            "key": "3-0-0",\n                            "data":{\n                                "name":"Expenses.doc",\n                                "size":"30kb",\n                                "type":"Document"\n                            }\n                        },\n                        {\n                            "key": "3-0-1",\n                            "data":{\n                                "name":"Resume.doc",\n                                "size":"25kb",\n                                "type":"Resume"\n                            }\n                        }\n                    ]\n                },\n                {\n                    "key": "3-1",\n                    "data":{\n                        "name":"Home",\n                        "size":"20kb",\n                        "type":"Folder"\n                    },\n                    "children":[\n                        {\n                            "key": "3-1-0",\n                            "data":{\n                                "name":"Invoices",\n                                "size":"20kb",\n                                "type":"Text"\n                            }\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            "key": "4",\n            "data": {\n                "name":"Downloads",\n                "size":"25kb",\n                "type":"Folder"\n            },\n            "children":[\n                {\n                    "key": "4-0",\n                    "data": {\n                        "name":"Spanish",\n                        "size":"10kb",\n                        "type":"Folder"\n                    },\n                    "children":[\n                        {\n                            "key": "4-0-0",\n                            "data":{\n                                "name":"tutorial-a1.txt",\n                                "size":"5kb",\n                                "type":"Text"\n                            }\n                        },\n                        {\n                            "key": "4-0-1",\n                            "data":{\n                                "name":"tutorial-a2.txt",\n                                "size":"5kb",\n                                "type":"Text"\n                            }\n                        }\n                    ]\n                },\n                {\n                    "key": "4-1",\n                    "data":{\n                        "name":"Travel",\n                        "size":"15kb",\n                        "type":"Text"\n                    },\n                    "children":[\n                        {\n                            "key": "4-1-0",\n                            "data":{\n                                "name":"Hotel.pdf",\n                                "size":"10kb",\n                                "type":"PDF"\n                            }\n                        },\n                        {\n                            "key": "4-1-1",\n                            "data":{\n                                "name":"Flight.pdf",\n                                "size":"5kb",\n                                "type":"PDF"\n                            }\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            "key": "5",\n            "data": {\n                "name":"Main",\n                "size":"50kb",\n                "type":"Folder"\n            },\n            "children":[\n                {\n                    "key": "5-0",\n                    "data":{\n                        "name":"bin",\n                        "size":"50kb",\n                        "type":"Link"\n                    }\n                },\n                {\n                    "key": "5-1",\n                    "data":{\n                        "name":"etc",\n                        "size":"100kb",\n                        "type":"Link"\n                    }\n                },\n                {\n                    "key": "5-2",\n                    "data":{\n                        "name":"var",\n                        "size":"100kb",\n                        "type":"Link"\n                    }\n                }\n            ]\n        },\n        {\n            "key": "6",\n            "data":{\n                "name":"Other",\n                "size":"5kb",\n                "type":"Folder"\n            },\n            "children":[\n                {\n                    "key": "6-0",\n                    "data":{\n                        "name":"todo.txt",\n                        "size":"3kb",\n                        "type":"Text"\n                    }\n                },\n                {\n                    "key": "6-1",\n                    "data":{\n                        "name":"logo.png",\n                        "size":"2kb",\n                        "type":"Picture"\n                    }\n                }\n            ]\n        },\n        {\n            "key": "7",\n            "data":{\n                "name":"Pictures",\n                "size":"150kb",\n                "type":"Folder"\n            },\n            "children":[\n                {\n                    "key": "7-0",\n                    "data":{\n                        "name":"barcelona.jpg",\n                        "size":"90kb",\n                        "type":"Picture"\n                    }\n                },\n                {\n                    "key": "7-1",\n                    "data":{\n                        "name":"primevue.png",\n                        "size":"30kb",\n                        "type":"Picture"\n                    }\n                },\n                {\n                    "key": "7-2",\n                    "data":{\n                        "name":"prime.jpg",\n                        "size":"30kb",\n                        "type":"Picture"\n                    }\n                }\n            ]\n        },\n        {\n            "key": "8",\n            "data":{\n                "name":"Videos",\n                "size":"1500kb",\n                "type":"Folder"\n            },\n            "children":[\n                {\n                    "key": "8-0",\n                    "data":{\n                        "name":"primefaces.mkv",\n                        "size":"1000kb",\n                        "type":"Video"\n                    }\n                },\n                {\n                    "key": "8-1",\n                    "data":{\n                        "name":"intro.avi",\n                        "size":"500kb",\n                        "type":"Video"\n                    }\n                }\n            ]\n        }\n    ]\n}\n\n',-1),F=Object(l["m"])("h5",null,"Dynamic Columns",-1),D=Object(l["m"])("p",null,"Column components can be dynamically generated using a v-for as well.",-1),V=Object(l["m"])("code",null,[Object(l["m"])("template",null,'\n<TreeTable :value="nodes">\n    <Column v-for="col of columns" :key="col.field"\n        :field="col.field" :header="col.header" :expander="col.expander"></Column>\n</TreeTable>\n'),Object(l["l"])("\n")],-1),P=Object(l["m"])("code",null,"\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            nodes: null,\n            columns: null\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n\n        this.columns = [\n            {field: 'name', header: 'Vin', expander: true},\n            {field: 'size', header: 'Size'},\n            {field: 'type', header: 'Type'}\n        ];\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => this.nodes = data);\n    }\n}\n\n",-1),A=Object(l["m"])("h5",null,"Column Component Properties utilized by the TreeTable",-1),I=Object(l["m"])("div",{class:"doc-tablewrapper"},[Object(l["m"])("table",{class:"doc-table"},[Object(l["m"])("thead",null,[Object(l["m"])("tr",null,[Object(l["m"])("th",null,"Name"),Object(l["m"])("th",null,"Type"),Object(l["m"])("th",null,"Default"),Object(l["m"])("th",null,"Description")])]),Object(l["m"])("tbody",null,[Object(l["m"])("tr",null,[Object(l["m"])("td",null,"columnKey"),Object(l["m"])("td",null,"any"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,"Identifier of a column if field property is not defined.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"expander"),Object(l["m"])("td",null,"boolean"),Object(l["m"])("td",null,"false"),Object(l["m"])("td",null,"Whether the column would display a toggle icon.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"field"),Object(l["m"])("td",null,"string"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,"Property name or a getter function of a row data.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"sortField"),Object(l["m"])("td",null,"string"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,"Property name or a getter function of a row data used for sorting, defaults to field.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"sortable"),Object(l["m"])("td",null,"any"),Object(l["m"])("td",null,"false"),Object(l["m"])("td",null,"Defines if a column is sortable.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"header"),Object(l["m"])("td",null,"any"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,"Header content of the column.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"footer"),Object(l["m"])("td",null,"any"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,"Footer content of the column.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"headerStyle"),Object(l["m"])("td",null,"object"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,"Inline style of the column.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"headerClass"),Object(l["m"])("td",null,"string"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,"Style class of the column.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"bodyStyle"),Object(l["m"])("td",null,"object"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,"Inline style of the column.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"bodyClass"),Object(l["m"])("td",null,"string"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,"Style class of the column.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"footerStyle"),Object(l["m"])("td",null,"object"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,"Inline style of the column.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"footerClass"),Object(l["m"])("td",null,"string"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,"Style class of the column.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"filterHeaderStyle"),Object(l["m"])("td",null,"object"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,"Inline style of the column filter header.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"filterHeaderClass"),Object(l["m"])("td",null,"string"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,"Style class of the column filter header.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"filterMatchMode"),Object(l["m"])("td",null,"string"),Object(l["m"])("td",null,"startsWith"),Object(l["m"])("td",null,'Defines filterMatchMode; "startsWith", "contains", "endsWidth", "equals", "notEquals", "in" and "custom".')]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"excludeGlobalFilter"),Object(l["m"])("td",null,"boolean"),Object(l["m"])("td",null,"false"),Object(l["m"])("td",null,"Whether to exclude from global filtering or not.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"hidden"),Object(l["m"])("td",null,"boolean"),Object(l["m"])("td",null,"false"),Object(l["m"])("td",null,"Whether the column is rendered.")])])])],-1),B=Object(l["m"])("h5",null,"Programmatic Control",-1),L=Object(l["m"])("p",null,[Object(l["l"])("Tree state can be controlled programmatically with the "),Object(l["m"])("i",null,"expandedKeys"),Object(l["l"])(" property that defines the keys that are expanded. This property is a Map instance whose key is the key of a node and value is a boolean. Note that "),Object(l["m"])("i",null,"expandedKeys"),Object(l["l"])(" also supports two-way binding with the v-model directive. ")],-1),E=Object(l["m"])("p",null,"Example below expands and collapses all nodes with buttons.",-1),W=Object(l["m"])("code",null,[Object(l["m"])("template",null,'\n<div style="margin-bottom: 1em">\n    <Button type="button" icon="pi pi-plus" label="Expand All" @click="expandAll" />\n    <Button type="button" icon="pi pi-minus" label="Collapse All" @click="collapseAll" />\n</div>\n<TreeTable :value="nodes" :expandedKeys="expandedKeys">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n'),Object(l["l"])("\n")],-1),R=Object(l["m"])("code",null,"\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            nodes: null,\n            expandedKeys: {}\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        expandAll() {\n            for (let node of this.nodes) {\n                this.expandNode(node);\n            }\n\n            this.expandedKeys = {...this.expandedKeys};\n        },\n        collapseAll() {\n            this.expandedKeys = {};\n        },\n        expandNode(node) {\n            if (node.children && node.children.length) {\n                this.expandedKeys[node.key] = true;\n\n                for (let child of node.children) {\n                    this.expandNode(child);\n                }\n            }\n        }\n    }\n}\n\n",-1),H=Object(l["m"])("p",null,"To display some nodes as expanded by default, simply add their keys to the map.",-1),q=Object(l["m"])("code",null,"\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            nodes: null,\n            expandedKeys: {}\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => {\n            this.nodes = data;\n            this.expandedKeys[this.nodes[0].key] = true;\n            this.expandedKeys[this.nodes[1].key] = true;\n        });\n    }\n}\n\n",-1),_=Object(l["m"])("h5",null,"Templating",-1),U=Object(l["m"])("p",null,[Object(l["l"])("Field data of a corresponding node is displayed as the cell content by default, this can be customized using a "),Object(l["m"])("i",null,"body"),Object(l["l"])(" template where current node data and column properties are passed via the slot props. On the other hand, "),Object(l["m"])("i",null,"header"),Object(l["l"])(" and "),Object(l["m"])("i",null,"footer"),Object(l["l"])(" sections of a column can either be defined with the properties or the templates. Similarly TreeTable itself also provides header and footer properties along with the templates for the main header and footer of the table.")],-1),G=Object(l["m"])("code",null,[Object(l["m"])("template",null,'\n<TreeTable :value="nodes">\n    <template #header>\n        FileSystem\n    </template>\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n    <Column headerStyle="width: 8em" bodyStyle="text-align: center">\n        <template #header>\n            <Button type="button" icon="pi pi-cog"></Button>\n        </template>\n        <template #body="slotProps">\n            <Button type="button" icon="pi pi-search" class="p-button-success" style="margin-right: .5em"></Button>\n            <Button type="button" icon="pi pi-pencil" class="p-button-warning"></Button>\n        </template>\n    </Column>\n    <template #footer>\n        <div style="text-align:left">\n            <Button icon="pi pi-refresh" />\n        </div>\n    </template>\n</TreeTable>\n'),Object(l["l"])("\n")],-1),J=Object(l["m"])("h5",null,"Sizes",-1),Y=Object(l["m"])("p",null,[Object(l["l"])("In addition to the regular table, a smal and a large version are available with different paddings. For a table with smaller paddings use "),Object(l["m"])("i",null,"p-treetable-sm"),Object(l["l"])(" class and for a larger one use "),Object(l["m"])("i",null,"p-treetable-lg"),Object(l["l"])(".")],-1),Z=Object(l["m"])("code",null,[Object(l["m"])("template",null,'\n<TreeTable :value="nodes" class="p-treetable-sm">\n    <template #header>\n        Small Table\n    </template>\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n\n<TreeTable :value="nodes">\n    <template #header>\n        Small Table\n    </template>\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n\n<TreeTable :value="nodes" class="p-treetable-lg">\n    <template #header>\n        Small Table\n    </template>\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n'),Object(l["l"])("\n")],-1),$=Object(l["m"])("h5",null,"Pagination",-1),Q=Object(l["l"])("Pagination is enabled by setting "),X=Object(l["m"])("i",null,"paginator",-1),ee=Object(l["l"])(" property to true and defining the "),ne=Object(l["m"])("i",null,"rows",-1),te=Object(l["l"])(" property defines the number of rows per page. See the "),le=Object(l["l"])("Paginator"),oe=Object(l["l"])(" for the available customization options such as paginator templates, page links, rows per page options and more which can be passed through the TreeTable."),ae=Object(l["m"])("code",null,[Object(l["m"])("template",null,'\n<TreeTable :value="nodes" :paginator="true" :rows="10">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n'),Object(l["l"])("\n")],-1),de=Object(l["m"])("p",null,"paginatorLeft and paginatorRight templates are available to specify custom content at the left and right side.",-1),re=Object(l["m"])("code",null,[Object(l["m"])("template",null,'\n<TreeTable :value="nodes" :paginator="true" :rows="10">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n    <template #paginatorLeft>\n        <Button type="button" icon="pi pi-refresh" />\n    </template>\n    <template #paginatorRight>\n        <Button type="button" icon="pi pi-cloud" />\n    </template>\n</TreeTable>\n'),Object(l["l"])("\n")],-1),ie=Object(l["m"])("p",null,[Object(l["l"])("Paginator can also be programmed programmatically using a binding to the "),Object(l["m"])("i",null,"first"),Object(l["l"])(" property that defines the index of the first element to display. For example setting first to zero will reset the paginator to the very first page. This property also supports the v-model directive in case you'd like your binding to be updated whenever the user changes the page.")],-1),ce=Object(l["m"])("code",null,[Object(l["m"])("template",null,'\n<TreeTable :value="nodes" :paginator="true" :rows="10" :first="firstRecordIndex">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n'),Object(l["l"])("\n")],-1),ue=Object(l["m"])("h5",null,"Sorting",-1),me=Object(l["m"])("p",null,[Object(l["l"])("Enabling "),Object(l["m"])("i",null,"sortable"),Object(l["l"])(" property at column component would be enough to make a column sortable. The property to use when sorting is the "),Object(l["m"])("i",null,"field"),Object(l["l"])(" by default and can be customized using the "),Object(l["m"])("i",null,"sortField"),Object(l["l"])(".")],-1),se=Object(l["m"])("code",null,[Object(l["m"])("template",null,'\n<TreeTable :value="nodes" sortMode="single">\n    <Column field="name" header="Name" :expander="true" :sortable="true"></Column>\n    <Column field="size" header="Size" :sortable="true"></Column>\n    <Column field="type" header="Type" :sortable="true"></Column>\n</TreeTable>\n'),Object(l["l"])("\n")],-1),be=Object(l["m"])("p",null,[Object(l["l"])("By default sorting is executed on the clicked column only. To enable multiple field sorting, set "),Object(l["m"])("i",null,"sortMode"),Object(l["l"])(' property to "multiple" and use metakey when clicking on another column.')],-1),pe=Object(l["m"])("code",null,[Object(l["m"])("template",null,'\n<TreeTable :value="nodes" sortMode="multiple">\n    <Column field="name" header="Name" :expander="true" :sortable="true"></Column>\n    <Column field="size" header="Size" :sortable="true"></Column>\n    <Column field="type" header="Type" :sortable="true"></Column>\n</TreeTable>\n'),Object(l["l"])("\n")],-1),Oe=Object(l["m"])("p",null,[Object(l["l"])("In case you'd like to display the table as sorted per a single column by default on mount or programmatically apply sort, use "),Object(l["m"])("i",null,"sortField"),Object(l["l"])(" and "),Object(l["m"])("i",null,"sortOrder"),Object(l["l"])(" properties. These two properties also support the v-model directive to get updated when the user applies sort a column.")],-1),je=Object(l["m"])("code",null,[Object(l["m"])("template",null,'\n<TreeTable :value="nodes" sortField="size" :sortOrder="1"">\n    <Column field="name" header="Name" :expander="true" :sortable="true"></Column>\n    <Column field="size" header="Size" :sortable="true"></Column>\n    <Column field="type" header="Type" :sortable="true"></Column>\n</TreeTable>\n\n<TreeTable :value="nodes" sortMode="single" sortField="dynamicSortField" :sortOrder="dynamicSortOrder">\n    <Column field="name" header="Name" :expander="true" :sortable="true"></Column>\n    <Column field="size" header="Size" :sortable="true"></Column>\n    <Column field="type" header="Type" :sortable="true"></Column>\n</TreeTable>\n'),Object(l["l"])("\n")],-1),he=Object(l["m"])("p",null,[Object(l["l"])("In multiple mode, use the "),Object(l["m"])("i",null,"multiSortMeta"),Object(l["l"])(" property and bind an array of SortMeta objects instead.")],-1),fe=Object(l["m"])("code",null,[Object(l["m"])("template",null,'\n<TreeTable :value="nodes" sortMode="multiple" :multiSortMeta="multiSortMeta">\n    <Column field="name" header="Name" :expander="true" :sortable="true"></Column>\n    <Column field="size" header="Size" :sortable="true"></Column>\n    <Column field="type" header="Type" :sortable="true"></Column>\n</TreeTable>\n'),Object(l["l"])("\n")],-1),ye=Object(l["m"])("code",null,"\ndata() {\n    return {\n        multiSortMeta: [\n            {field: 'year', order: 1},\n            {field: 'brand', order: -1}\n        ]\n    }\n}\n\n",-1),ve=Object(l["m"])("h5",null,"Filtering",-1),ge=Object(l["m"])("p",null,[Object(l["l"])("Filtering is enabled by defining a filter template per column to populate the "),Object(l["m"])("i",null,"filters"),Object(l["l"])(" property of the TreeTable. The "),Object(l["m"])("i",null,"filters"),Object(l["l"])(' property should be an key-value object where keys are the field name and the value is the filter value. The filter template receives the column properties via the slotProps and accepts any form element as the filter element. Default match mode is "startsWith" and this can be configured per column using the '),Object(l["m"])("i",null,"filterMatchMode"),Object(l["l"])(' property that also accepts "contains", "endsWith", "equals", "notEquals" and "in" as available modes.')],-1),Te=Object(l["m"])("p",null,[Object(l["l"])("Optionally a global filter is available to search against all the fields, in this case the special "),Object(l["m"])("i",null,"global"),Object(l["l"])(" keyword should be the property to be populated.")],-1),Ce=Object(l["m"])("p",null,[Object(l["l"])("In addition "),Object(l["m"])("i",null,"filterMode"),Object(l["l"])(" specifies the filtering strategy. In "),Object(l["m"])("b",null,"lenient"),Object(l["l"])(" mode when the query matches a node, children of the node are not searched further as all descendants of the node are included. On the other hand, in "),Object(l["m"])("b",null,"strict"),Object(l["l"])(" mode when the query matches a node, filtering continues on all descendants.")],-1),xe=Object(l["m"])("code",null,[Object(l["m"])("template",null,'\n<TreeTable :value="nodes" :filters="filters" filterMode="lenient">\n    <template #header>\n        <div style="text-align: right">\n            <i class="pi pi-search" style="margin: 4px 4px 0px 0px;"></i>\n            <InputText v-model="filters[\'global\']" placeholder="Global Search" size="50" />\n        </div>\n    </template>\n    <Column field="name" header="Name" :expander="true">\n        <template #filter>\n            <InputText type="text" v-model="filters[\'name\']" class="p-column-filter" />\n        </template>\n    </Column>\n    <Column field="size" header="Size">\n        <template #filter>\n            <InputText type="text" v-model="filters[\'size\']" class="p-column-filter" />\n        </template>\n    </Column>\n    <Column field="type" header="Type">\n        <template #filter>\n            <InputText type="text" v-model="filters[\'type\']" class="p-column-filter" />\n        </template>\n    </Column>\n</TreeTable>\n'),Object(l["l"])("\n")],-1),we=Object(l["m"])("code",null,"\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            filters: {},\n            nodes: null\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => this.nodes = data);\n    }\n}\n\n",-1),ze=Object(l["m"])("h5",null,"Selection",-1),ke=Object(l["m"])("p",null,[Object(l["l"])("Tree supports "),Object(l["m"])("b",null,"single"),Object(l["l"])(", "),Object(l["m"])("b",null,"multiple"),Object(l["l"])(" and "),Object(l["m"])("b",null,"checkbox"),Object(l["l"])(" selection modes. Define the "),Object(l["m"])("i",null,"selectionKeys"),Object(l["l"])(" with the v-model operator and the "),Object(l["m"])("i",null,"selectionMode"),Object(l["l"])(" properties to enable the selection. By default in multiple selection mode, metaKey is necessary to add to existing selections however this can be configured with "),Object(l["m"])("i",null,"metaKeySelection"),Object(l["l"])(" property. Note that in touch enabled devices, Tree does not require metaKey. In addition selection on a particular node can be disabled if the "),Object(l["m"])("i",null,"selectable"),Object(l["l"])(" is false on the node instance.")],-1),Se=Object(l["m"])("p",null,[Object(l["l"])("Similarly to the "),Object(l["m"])("i",null,"expandedKeys"),Object(l["l"])(", "),Object(l["m"])("i",null,"selectionKeys"),Object(l["l"])(' is a Map instance whose key is the key of a node and value is a boolean in "single" and "multiple" cases. On the other hand in "checkbox" mode, instead of a boolean, value should be an object that has "checked" and "partialChecked" properties to represent the checked state of a node.')],-1),Ne=Object(l["m"])("code",null,[Object(l["m"])("template",null,'\n<TreeTable :value="nodes" selectionMode="multiple" v-model:selectionKeys="selectedKeys1">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n\n<h3>Multiple Selection without MetaKey</h3>\n<TreeTable :value="nodes" selectionMode="multiple" v-model:selectionKeys="selectedKeys2" :metaKeySelection="false">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n\n<h3>Checkbox Selection</h3>\n<TreeTable :value="nodes" selectionMode="checkbox" v-model:selectionKeys="selectedKeys3">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n\n<h3>Events</h3>\n<TreeTable :value="nodes" selectionMode="single" v-model:selectionKeys="selectedKey2"\n    @node-select="onNodeSelect" @node-unselect="onNodeUnselect">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n'),Object(l["l"])("\n")],-1),Ke=Object(l["m"])("code",null,"\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            selectedKey1: null,\n            selectedKey2: null,\n            selectedKeys1: null,\n            selectedKeys2: null,\n            selectedKeys3: null,\n            nodes: null\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        onNodeSelect(node) {\n            this.$toast.add({severity:'success', summary: 'Node Selected', detail: node.data.name, life: 3000});\n        },\n        onNodeUnselect(node) {\n            this.$toast.add({severity:'success', summary: 'Node Unselected', detail: node.data.name, life: 3000});\n        }\n    }\n}\n\n",-1),Me=Object(l["m"])("p",null,"To display some nodes as selected by default, simply add their keys to the map.",-1),Fe=Object(l["m"])("code",null,"\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            selectedKey1: null,\n            selectedKey2: null,\n            selectedKeys1: null,\n            selectedKeys2: null,\n            selectedKeys3: null,\n            nodes: null\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => {\n            this.nodes = data;\n\n            //single preselection\n            this.selectedKey1[this.nodes[0].key] = true;\n\n            //multiple preselection\n            this.selectedKeys2[this.nodes[0].key] = true;\n            this.selectedKeys2[this.nodes[1].key] = true;\n\n            //checkbox preselection\n            this.selectedKeys2[this.nodes[1].key] = {checked: true};\n        });\n    }\n}\n\n",-1),De=Object(l["m"])("h5",null,"Scrolling",-1),Ve=Object(l["m"])("p",null,[Object(l["l"])("TreeTable supports both horizontal and vertical scrolling with support for frozen columns. Scrollable TreeTable is enabled using "),Object(l["m"])("i",null,"scrollable"),Object(l["l"])(" property and "),Object(l["m"])("i",null,"scrollHeight"),Object(l["l"])(" to define the viewport height.")],-1),Pe=Object(l["m"])("code",null,[Object(l["m"])("template",null,'\n<TreeTable :value="nodes" style="margin-bottom: 2rem" :scrollable="true" scrollHeight="400px">\n    <Column field="name" header="Name" :expander="true" style="min-width:200px"></Column>\n    <Column field="size" header="Size" style="min-width:200px"></Column>\n    <Column field="type" header="Type" style="min-width:200px"></Column>\n</TreeTable>\n'),Object(l["l"])("\n")],-1),Ae=Object(l["m"])("h5",null,"Column Widths of a Scrollable TreeTable",-1),Ie=Object(l["m"])("p",null,"Scrollable treetable uses flex layout so there are a couple of rules to consider when adjusting the widths of columns.",-1),Be=Object(l["m"])("ul",null,[Object(l["m"])("li",null,[Object(l["l"])("Use "),Object(l["m"])("i",null,"min-width"),Object(l["l"])(" in vertical scrolling only so that when there is enough space columns may grow and for smaller screens a horizontal scrollbar is displayed to provide responsive design.")]),Object(l["m"])("li",null,[Object(l["l"])("When horizontal scrolling is enabled, prefer "),Object(l["m"])("i",null,"width"),Object(l["l"])(" instead of "),Object(l["m"])("i",null,"min-width"),Object(l["l"])(".")]),Object(l["m"])("li",null,[Object(l["l"])("In vertical scrolling only, use "),Object(l["m"])("i",null,"flex"),Object(l["l"])(" to disable grow and shrink while defining a initial width. When horizontal scrolling is enabled, this is not required as columns do not grow or shrink in horizontal scrolling.")])],-1),Le=Object(l["m"])("code",null,[Object(l["m"])("template",null,'\n<Column field="vin" header="Vin" style="flex: 0 0 4rem"></Column>\n'),Object(l["l"])("\n")],-1),Ee=Object(l["m"])("h6",null,"Flex Scroll",-1),We=Object(l["m"])("p",null,"In cases where viewport should adjust itself according to the table parent's height instead of a fixed viewport height, set scrollHeight option as flex. In example below, table is inside a Dialog where viewport size dynamically responds to the dialog size changes such as maximizing. FlexScroll can also be used for cases where scrollable viewport should be responsive with respect to the window size for full page scroll.",-1),Re=Object(l["m"])("code",null,[Object(l["m"])("template",null,'\n<Button label="Show" icon="pi pi-external-link" @click="openDialog" />\n<Dialog header="Flex Scroll" v-model:visible="dialogVisible" :style="{width: \'50vw\'}" :maximizable="true" :modal="true" :contentStyle="{height: \'300px\'}">\n    <TreeTable :value="nodes" :scrollable="true" scrollHeight="flex">\n        <Column field="name" header="Name" :expander="true" style="min-width:200px"></Column>\n        <Column field="size" header="Size" style="min-width:200px"></Column>\n        <Column field="type" header="Type" style="min-width:200px"></Column>\n    </TreeTable>\n    <template #footer>\n        <Button label="Yes" icon="pi pi-check" @click="closeDialog" />\n        <Button label="No" icon="pi pi-times" @click="closeDialog" class="p-button-secondary"/>\n    </template>\n</Dialog>\n'),Object(l["l"])("\n")],-1),He=Object(l["m"])("h6",null,"Horizontal Scrolling",-1),qe=Object(l["m"])("p",null,[Object(l["l"])("For horizontal scrolling, it is required to set "),Object(l["m"])("i",null,"scrollDirection"),Object(l["l"])(' to "horizontal" and give fixed widths to columns.')],-1),_e=Object(l["m"])("code",null,[Object(l["m"])("template",null,'\n<TreeTable :value="nodes" :scrollable="true" scrollDirection="horizontal">\n    <Column field="name" header="Name" :expander="true" style="width:200px"></Column>\n    <Column field="size" header="Size" style="width:200px"></Column>\n    <Column field="type" header="Type" style="width:200px"></Column>\n</TreeTable>\n'),Object(l["l"])("\n")],-1),Ue=Object(l["m"])("h6",null,"Horizontal and Vertical Scrolling",-1),Ge=Object(l["m"])("p",null,[Object(l["l"])("Set "),Object(l["m"])("i",null,"scrollDirection"),Object(l["l"])(' to "both" and give fixed widths to columns to scroll both ways.')],-1),Je=Object(l["m"])("code",null,[Object(l["m"])("template",null,'\n<TreeTable :value="customers" :scrollable="true" scrollHeight="400px" scrollDirection="both">\n    <Column field="name" header="Name" :expander="true" style="width:200px"></Column>\n    <Column field="size" header="Size" style="width:200px"></Column>\n    <Column field="type" header="Type" style="width:200px"></Column>\n</TreeTable>\n'),Object(l["l"])("\n")],-1),Ye=Object(l["m"])("h6",null,"Frozen Columns",-1),Ze=Object(l["m"])("p",null,[Object(l["l"])("Certain columns can be frozen by using the "),Object(l["m"])("i",null,"frozen"),Object(l["l"])(" property of the column component. In addition "),Object(l["m"])("i",null,"alignFrozen"),Object(l["l"])(" is available to define whether the column should be fixed on the left or right.")],-1),$e=Object(l["m"])("code",null,[Object(l["m"])("template",null,'\n<TreeTable :value="customers" :scrollable="true" scrollHeight="400px" scrollDirection="both">\n    <Column field="name" header="Name" :expander="true" style="width:200px" frozen></Column>\n    <Column field="size" header="Size" style="width:200px"></Column>\n    <Column field="type" header="Type" style="width:200px" frozen alignFrozen="right"></Column>\n</TreeTable>\n'),Object(l["l"])("\n")],-1),Qe=Object(l["m"])("h5",null,"Lazy",-1),Xe=Object(l["m"])("p",null,[Object(l["l"])("Lazy Loading is handy to deal with huge datasets. Idea is instead of loading the whole tree, load nodes on demand when necessary. The important part when lazy loading nodes is setting "),Object(l["m"])("i",null,"leaf"),Object(l["l"])(" to true on a node instance so that even without children, tree would render an expand icon. Example below uses an in memory collection to mimic a lazy loading scenario with timeouts. ")],-1),en=Object(l["m"])("p",null,[Object(l["l"])("In addition lazy loading of root level nodes is implemented by handling pagination and sorting using "),Object(l["m"])("i",null,"page"),Object(l["l"])(" and "),Object(l["m"])("i",null,"sort"),Object(l["l"])(" events by making a remote query using the information passed to the events such as first offset, number of rows and sort field for ordering. Filtering is handled differently as filter elements are defined using templates, use the event you prefer on your form elements such as input, change, blur to make a remote call by passing the filters property to update the displayed data. Note that, in lazy filtering, totalRecords should also be updated to align the data with the paginator.")],-1),nn=Object(l["l"])(". "),tn=Object(l["m"])("p",null," Example below uses an in memory collection to mimic a lazy loading scenario with timeouts.",-1),ln=Object(l["m"])("code",null,[Object(l["m"])("template",null,'\n<TreeTable :value="nodes" :lazy="true" :paginator="true" :rows="rows" :loading="loading"\n    @node-expand="onExpand" @page="onPage" :totalRecords="totalRecords">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n'),Object(l["l"])("\n")],-1),on=Object(l["m"])("code",null,"\nexport default {\n    data() {\n        return {\n            nodes: null,\n            rows: 10,\n            loading: false,\n            totalRecords: 0\n        }\n    },\n    mounted() {\n        this.loading = true;\n\n        setTimeout(() => {\n            this.loading = false;\n            this.nodes = this.loadNodes(0, this.rows);\n            this.totalRecords = 1000;\n        }, 1000);\n    },\n    methods: {\n        onExpand(node) {\n            if (!node.children) {\n                this.loading = true;\n\n                setTimeout(() => {\n                    let lazyNode = {...node};\n\n                    lazyNode.children = [\n                        {\n                            data: {\n                                name: lazyNode.data.name + ' - 0',\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'File'\n                            },\n                        },\n                        {\n                            data: {\n                                name: lazyNode.data.name + ' - 1',\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'File'\n                            }\n                        }\n                    ];\n\n                    let nodes = this.nodes.map(n => {\n                        if (n.key === node.key) {\n                            n = lazyNode;\n                        }\n\n                        return n;\n                    });\n\n                    this.loading = false;\n                    this.nodes = nodes;\n                }, 250);\n            }\n        },\n        onPage(event) {\n            this.loading = true;\n\n            //imitate delay of a backend call\n            setTimeout(() => {\n                this.loading = false;\n                this.nodes = this.loadNodes(event.first, this.rows);\n            }, 1000);\n        },\n        loadNodes(first, rows) {\n            let nodes = [];\n\n            for(let i = 0; i < rows; i++) {\n                let node = {\n                    key: (first + i),\n                    data: {\n                        name: 'Item ' + (first + i),\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                        type: 'Type ' + (first + i)\n                    },\n                    leaf: false\n                };\n\n                nodes.push(node);\n            }\n\n            return nodes;\n        }\n    }\n}\n\n",-1),an=Object(l["m"])("h5",null,"Column Resize",-1),dn=Object(l["m"])("p",null,[Object(l["l"])("Columns can be resized using drag drop by setting the "),Object(l["m"])("i",null,"resizableColumns"),Object(l["l"])(' to true. There are two resize modes; "fit" and "expand". Fit is the default one and the overall table width does not change when a column is resized. In "expand" mode, table width also changes along with the column width. '),Object(l["m"])("i",null,"column-resize-end"),Object(l["l"])(" is a callback that passes the resized column header and delta change as a parameter.")],-1),rn=Object(l["m"])("code",null,[Object(l["m"])("template",null,'\n<h3>Fit Mode</h3>\n<TreeTable :value="nodes" :resizableColumns="true" columnResizeMode="fit">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n\n<h3>Expand Mode</h3>\n<TreeTable :value="nodes" :resizableColumns="true" columnResizeMode="expand">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n'),Object(l["l"])("\n")],-1),cn=Object(l["m"])("p",null,"It is important to note that when you need to change column widths, since table width is 100%, giving fixed pixel widths does not work well as browsers scale them, instead give percentage widths.",-1),un=Object(l["m"])("code",null,[Object(l["m"])("template",null,'\n<TreeTable :value="nodes" :resizableColumns="true">\n    <Column field="name" header="Name" :expander="true"></Column headerStyle="width: 20%">\n    <Column field="size" header="Size" headerStyle="width: 40%"></Column>\n    <Column field="type" header="Type headerStyle="width: 40%""></Column>\n</TreeTable>\n'),Object(l["l"])("\n")],-1),mn=Object(l["m"])("h5",null,"Responsive",-1),sn=Object(l["m"])("p",null,[Object(l["l"])("TreeTable display can be optimized according to screen sizes using the built-in "),Object(l["m"])("i",null,"responsiveLayout"),Object(l["l"])(' property. Currently only available option is "scroll" that displays a horizontal scrollbar for small devices.')],-1),bn=Object(l["m"])("code",null,[Object(l["m"])("template",null,'\n<TreeTable :value="nodes" responsiveLayout="scroll">\n    <Column field="name" header="Name" :expander="true" style="min-width:200px"></Column>\n    <Column field="size" header="Size" style="min-width:200px"></Column>\n    <Column field="type" header="Type" style="min-width:200px"></Column>\n</TreeTable>\n'),Object(l["l"])("\n")],-1),pn=Object(l["m"])("h5",null,"Properties",-1),On=Object(l["m"])("p",null,"Any property such as style and class are passed to the underlying root element. Following is the additional property to configure the component.",-1),jn={class:"doc-tablewrapper"},hn={class:"doc-table"},fn=Object(l["m"])("thead",null,[Object(l["m"])("tr",null,[Object(l["m"])("th",null,"Name"),Object(l["m"])("th",null,"Type"),Object(l["m"])("th",null,"Default"),Object(l["m"])("th",null,"Description")])],-1),yn=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"value"),Object(l["m"])("td",null,"array"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,"An array of treenodes.")],-1),vn=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"expandedKeys"),Object(l["m"])("td",null,"array"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,"A map of keys to represent the state of the tree expansion state in controlled mode.")],-1),gn=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"selectionKeys"),Object(l["m"])("td",null,"any"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,"A map of keys to control the selection state.")],-1),Tn=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"selectionMode"),Object(l["m"])("td",null,"string"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,'Defines the selection mode, valid values "single", "multiple", and "checkbox".')],-1),Cn=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"metaKeySelection"),Object(l["m"])("td",null,"boolean"),Object(l["m"])("td",null,"true"),Object(l["m"])("td",null,"Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically.")],-1),xn=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"rows"),Object(l["m"])("td",null,"number"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,"Number of rows to display per page.")],-1),wn=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"first"),Object(l["m"])("td",null,"number"),Object(l["m"])("td",null,"0"),Object(l["m"])("td",null,"Index of the first row to be displayed.")],-1),zn=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"totalRecords"),Object(l["m"])("td",null,"number"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,"Number of total records, defaults to length of value when not defined.")],-1),kn=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"paginator"),Object(l["m"])("td",null,"boolean"),Object(l["m"])("td",null,"false"),Object(l["m"])("td",null,"When specified as true, enables the pagination.")],-1),Sn=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"paginatorPosition"),Object(l["m"])("td",null,"string"),Object(l["m"])("td",null,"bottom"),Object(l["m"])("td",null,'Position of the paginator, options are "top","bottom" or "both".')],-1),Nn=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"alwaysShowPaginator"),Object(l["m"])("td",null,"boolean"),Object(l["m"])("td",null,"true"),Object(l["m"])("td",null,"Whether to show it even there is only one page.")],-1),Kn=Object(l["m"])("td",null,"paginatorTemplate",-1),Mn=Object(l["m"])("td",null,"string",-1),Fn=Object(l["m"])("td",null,[Object(l["l"])("FirstPageLink PrevPageLink PageLinks "),Object(l["m"])("br"),Object(l["l"])(" NextPageLink LastPageLink RowsPerPageDropdown")],-1),Dn=Object(l["l"])("Template of the paginator. See the "),Vn=Object(l["l"])("Paginator"),Pn=Object(l["l"])(" for all available options."),An=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"pageLinkSize"),Object(l["m"])("td",null,"number"),Object(l["m"])("td",null,"5"),Object(l["m"])("td",null,"Number of page links to display.")],-1),In=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"rowsPerPageOptions"),Object(l["m"])("td",null,"array"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,"Array of integer values to display inside rows per page dropdown.")],-1),Bn=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"currentPageReportTemplate"),Object(l["m"])("td",null,"string"),Object(l["m"])("td",null,"({currentPage} of {totalPages})"),Object(l["m"])("td",null,"Template of the current page report element.")],-1),Ln=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"lazy"),Object(l["m"])("td",null,"boolean"),Object(l["m"])("td",null,"false"),Object(l["m"])("td",null,"Defines if data is loaded and interacted with in lazy manner.")],-1),En=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"loading"),Object(l["m"])("td",null,"boolean"),Object(l["m"])("td",null,"false"),Object(l["m"])("td",null,"Displays a loader to indicate data load is in progress.")],-1),Wn=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"loadingIcon"),Object(l["m"])("td",null,"string"),Object(l["m"])("td",null,"pi pi-spinner"),Object(l["m"])("td",null,"The icon to show while indicating data load is in progress.")],-1),Rn=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"rowHover"),Object(l["m"])("td",null,"boolean"),Object(l["m"])("td",null,"false"),Object(l["m"])("td",null,"When enabled, background of the rows change on hover.")],-1),Hn=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"autoLayout"),Object(l["m"])("td",null,"boolean"),Object(l["m"])("td",null,"false"),Object(l["m"])("td",null,"Whether the cell widths scale according to their content or not.")],-1),qn=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"sortField"),Object(l["m"])("td",null,"string"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,"Property name or a getter function of a row data used for sorting by default.")],-1),_n=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"sortOrder"),Object(l["m"])("td",null,"number"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,"Order to sort the data by default.")],-1),Un=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"defaultSortOrder"),Object(l["m"])("td",null,"number"),Object(l["m"])("td",null,"1"),Object(l["m"])("td",null,"Default sort order of an unsorted column.")],-1),Gn=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"multiSortMeta"),Object(l["m"])("td",null,"array"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,"An array of SortMeta objects to sort the data by default in multiple sort mode.")],-1),Jn=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"sortMode"),Object(l["m"])("td",null,"string"),Object(l["m"])("td",null,"single"),Object(l["m"])("td",null,"Defines whether sorting works on single column or on multiple columns.")],-1),Yn=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"removableSort"),Object(l["m"])("td",null,"boolean"),Object(l["m"])("td",null,"false"),Object(l["m"])("td",null,"When enabled, columns can have an un-sorted state.")],-1),Zn=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"filters"),Object(l["m"])("td",null,"object"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,"Filters object with key-value pairs to define the filters.")],-1),$n=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"filterMode"),Object(l["m"])("td",null,"string"),Object(l["m"])("td",null,"lenient"),Object(l["m"])("td",null,'Mode for filtering valid values are "lenient" and "strict". Default is lenient.')],-1),Qn=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"filterLocale"),Object(l["m"])("td",null,"string"),Object(l["m"])("td",null,"undefined"),Object(l["m"])("td",null,"Locale to use in filtering. The default locale is the host environment's current locale.")],-1),Xn=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"resizableColumns"),Object(l["m"])("td",null,"boolean"),Object(l["m"])("td",null,"false"),Object(l["m"])("td",null,"When enabled, columns can be resized using drag and drop.")],-1),et=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"columnResizeMode"),Object(l["m"])("td",null,"string"),Object(l["m"])("td",null,"fit"),Object(l["m"])("td",null,[Object(l["l"])("Defines whether the overall table width should change on column resize, "),Object(l["m"])("br"),Object(l["l"])(' valid values are "fit" and "expand".')])],-1),nt=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"indentation"),Object(l["m"])("td",null,"number"),Object(l["m"])("td",null,"1"),Object(l["m"])("td",null,"Indentation factor as rem value for children nodes. Defaults to 1rem.")],-1),tt=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"showGridlines"),Object(l["m"])("td",null,"boolean"),Object(l["m"])("td",null,"false"),Object(l["m"])("td",null,"Whether to show grid lines between cells.")],-1),lt=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"scrollable"),Object(l["m"])("td",null,"boolean"),Object(l["m"])("td",null,"false"),Object(l["m"])("td",null,"When specified, enables horizontal and/or vertical scrolling.")],-1),ot=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"scrollDirection"),Object(l["m"])("td",null,"string"),Object(l["m"])("td",null,"vertical"),Object(l["m"])("td",null,'Orientation of the scrolling, options are "vertical", "horizontal" and "both".')],-1),at=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"scrollHeight"),Object(l["m"])("td",null,"string"),Object(l["m"])("td",null,"null"),Object(l["m"])("td",null,'Height of the scroll viewport in fixed pixels or the "flex" keyword for a dynamic size.')],-1),dt=Object(l["m"])("tr",null,[Object(l["m"])("td",null,"responsiveLayout"),Object(l["m"])("td",null,"string"),Object(l["m"])("td",null,"stack"),Object(l["m"])("td",null,"Defines the responsive mode, currently only option is scroll..")],-1),rt=Object(l["m"])("h5",null,"Events",-1),it=Object(l["m"])("div",{class:"doc-tablewrapper"},[Object(l["m"])("table",{class:"doc-table"},[Object(l["m"])("thead",null,[Object(l["m"])("tr",null,[Object(l["m"])("th",null,"Name"),Object(l["m"])("th",null,"Parameters"),Object(l["m"])("th",null,"Description")])]),Object(l["m"])("tbody",null,[Object(l["m"])("tr",null,[Object(l["m"])("td",null,"page"),Object(l["m"])("td",null,[Object(l["l"])("event.originalEvent: Browser event "),Object(l["m"])("br"),Object(l["l"])(" event.page: New page number "),Object(l["m"])("br"),Object(l["l"])(" event.pageCount: Total page count "),Object(l["m"])("br"),Object(l["l"])(" event.first: Index of first record "),Object(l["m"])("br"),Object(l["l"])(" event.rows: Number of rows to display in new page "),Object(l["m"])("br"),Object(l["l"])(" event.sortField: Field to sort against "),Object(l["m"])("br"),Object(l["l"])(" event.sortOrder: Sort order as integer "),Object(l["m"])("br"),Object(l["l"])(" event.multiSortMeta: MultiSort metadata "),Object(l["m"])("br"),Object(l["l"])(" event.filters: Collection of active filters "),Object(l["m"])("br"),Object(l["l"])(" event.filterMatchModes: Match modes per field ")]),Object(l["m"])("td",null,"Callback to invoke on pagination. Sort and Filter information is also available for lazy loading implementation.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"sort"),Object(l["m"])("td",null,[Object(l["l"])("event.originalEvent: Browser event "),Object(l["m"])("br"),Object(l["l"])(" event.first: Index of first record "),Object(l["m"])("br"),Object(l["l"])(" event.rows: Number of rows to display in new page "),Object(l["m"])("br"),Object(l["l"])(" event.sortField: Field to sort against "),Object(l["m"])("br"),Object(l["l"])(" event.sortOrder: Sort order as integer "),Object(l["m"])("br"),Object(l["l"])(" event.multiSortMeta: MultiSort metadata "),Object(l["m"])("br"),Object(l["l"])(" event.filters: Collection of active filters "),Object(l["m"])("br"),Object(l["l"])(" event.filterMatchModes: Match modes per field ")]),Object(l["m"])("td",null,"Callback to invoke on sort. Page and Filter information is also available for lazy loading implementation.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"filter"),Object(l["m"])("td",null,[Object(l["l"])("event.originalEvent: Browser event "),Object(l["m"])("br"),Object(l["l"])(" event.first: Index of first record "),Object(l["m"])("br"),Object(l["l"])(" event.rows: Number of rows to display in new page "),Object(l["m"])("br"),Object(l["l"])(" event.sortField: Field to sort against "),Object(l["m"])("br"),Object(l["l"])(" event.sortOrder: Sort order as integer "),Object(l["m"])("br"),Object(l["l"])(" event.multiSortMeta: MultiSort metadata "),Object(l["m"])("br"),Object(l["l"])(" event.filters: Collection of active filters "),Object(l["m"])("br"),Object(l["l"])(" event.filteredValue: Filtered collection "),Object(l["m"])("br"),Object(l["l"])(" event.filterMatchModes: Match modes per field ")]),Object(l["m"])("td",null,"Event to emit after filtering, not triggered in lazy mode.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"node-select"),Object(l["m"])("td",null,"node: Node instance"),Object(l["m"])("td",null,"Callback to invoke when a node is selected.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"node-unselect"),Object(l["m"])("td",null,"node: Node instance"),Object(l["m"])("td",null,"Callback to invoke when a node is unselected.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"node-expand"),Object(l["m"])("td",null,"node: Node instance"),Object(l["m"])("td",null,"Callback to invoke when a node is expanded.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"node-collapse"),Object(l["m"])("td",null,"node: Node instance"),Object(l["m"])("td",null,"Callback to invoke when a node is collapsed.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"column-resize-end"),Object(l["m"])("td",null,[Object(l["l"])("event.element: DOM element of the resized column."),Object(l["m"])("br"),Object(l["l"])(" event.delta: Change in column width")]),Object(l["m"])("td",null,"Callback to invoke when a column is resized.")])])])],-1),ct=Object(l["m"])("h5",null,"Slots",-1),ut=Object(l["m"])("div",{class:"doc-tablewrapper"},[Object(l["m"])("table",{class:"doc-table"},[Object(l["m"])("thead",null,[Object(l["m"])("tr",null,[Object(l["m"])("th",null,"Name"),Object(l["m"])("th",null,"Parameters")])]),Object(l["m"])("tbody",null,[Object(l["m"])("tr",null,[Object(l["m"])("td",null,"header"),Object(l["m"])("td",null,"-")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"paginatorLeft"),Object(l["m"])("td",null,"-")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"paginatorRight"),Object(l["m"])("td",null,"-")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"empty"),Object(l["m"])("td",null,"-")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"footer"),Object(l["m"])("td",null,"-")])])])],-1),mt=Object(l["m"])("h5",null,"Styling",-1),st=Object(l["l"])("Following is the list of structural style classes, for theming classes visit "),bt=Object(l["l"])("theming"),pt=Object(l["l"])(" page."),Ot=Object(l["m"])("div",{class:"doc-tablewrapper"},[Object(l["m"])("table",{class:"doc-table"},[Object(l["m"])("thead",null,[Object(l["m"])("tr",null,[Object(l["m"])("th",null,"Name"),Object(l["m"])("th",null,"Element")])]),Object(l["m"])("tbody",null,[Object(l["m"])("tr",null,[Object(l["m"])("td",null,"p-treetable"),Object(l["m"])("td",null,"Container element.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"p-treetable-scrollable"),Object(l["m"])("td",null,"Container element when table is scrollable.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"p-treetable-header"),Object(l["m"])("td",null,"Header section.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"p-treetable-footer"),Object(l["m"])("td",null,"Footer section.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"p-treetable-wrapper"),Object(l["m"])("td",null,"Wrapper of table element.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"p-treetable-table"),Object(l["m"])("td",null,"Table element.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"p-treetable-thead"),Object(l["m"])("td",null,"Table thead element.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"p-treetable-tbody"),Object(l["m"])("td",null,"Table tbody element.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"p-treetable-tfoot"),Object(l["m"])("td",null,"Table tfoot element.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"p-column-title"),Object(l["m"])("td",null,"Title of a column.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"p-sortable-column"),Object(l["m"])("td",null,"Sortable column header.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"p-frozen-column"),Object(l["m"])("td",null,"Frozen column header.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"p-treetable-toggler"),Object(l["m"])("td",null,"Toggle element for a row.")]),Object(l["m"])("tr",null,[Object(l["m"])("td",null,"p-treetable-emptymessage"),Object(l["m"])("td",null,"Cell containing the empty message.")])])])],-1),jt=Object(l["m"])("h5",null,"Dependencies",-1),ht=Object(l["m"])("p",null,"None.",-1);function ft(e,n,t,o,a,d){var r=Object(l["K"])("router-link"),i=Object(l["K"])("AppDoc"),c=Object(l["L"])("code");return Object(l["C"])(),Object(l["h"])(i,{name:"TreeTableDemo",sources:a.sources,service:["NodeService"],data:["treetablenodes"],github:"treetable/TreeTableDemo.vue"},{default:Object(l["U"])((function(){return[y,Object(l["V"])(Object(l["m"])("pre",null,[v],512),[[c,void 0,void 0,{script:!0}]]),g,T,C,x,w,Object(l["V"])(Object(l["m"])("pre",null,[z],512),[[c]]),Object(l["V"])(Object(l["m"])("pre",null,[k],512),[[c,void 0,void 0,{script:!0}]]),Object(l["V"])(Object(l["m"])("pre",null,[S],512),[[c,void 0,void 0,{script:!0}]]),N,Object(l["m"])("div",K,[Object(l["V"])(Object(l["m"])("pre",null,[M],512),[[c,void 0,void 0,{script:!0}]])]),F,D,Object(l["V"])(Object(l["m"])("pre",null,[V],512),[[c]]),Object(l["V"])(Object(l["m"])("pre",null,[P],512),[[c,void 0,void 0,{script:!0}]]),A,I,B,L,E,Object(l["V"])(Object(l["m"])("pre",null,[W],512),[[c]]),Object(l["V"])(Object(l["m"])("pre",null,[R],512),[[c,void 0,void 0,{script:!0}]]),H,Object(l["V"])(Object(l["m"])("pre",null,[q],512),[[c,void 0,void 0,{script:!0}]]),_,U,Object(l["V"])(Object(l["m"])("pre",null,[G],512),[[c]]),J,Y,Object(l["V"])(Object(l["m"])("pre",null,[Z],512),[[c]]),$,Object(l["m"])("p",null,[Q,X,ee,ne,te,Object(l["m"])(r,{to:"/paginator"},{default:Object(l["U"])((function(){return[le]})),_:1}),oe]),Object(l["V"])(Object(l["m"])("pre",null,[ae],512),[[c]]),de,Object(l["V"])(Object(l["m"])("pre",null,[re],512),[[c]]),ie,Object(l["V"])(Object(l["m"])("pre",null,[ce],512),[[c]]),ue,me,Object(l["V"])(Object(l["m"])("pre",null,[se],512),[[c]]),be,Object(l["V"])(Object(l["m"])("pre",null,[pe],512),[[c]]),Oe,Object(l["V"])(Object(l["m"])("pre",null,[je],512),[[c]]),he,Object(l["V"])(Object(l["m"])("pre",null,[fe],512),[[c]]),Object(l["V"])(Object(l["m"])("pre",null,[ye],512),[[c,void 0,void 0,{script:!0}]]),ve,ge,Te,Ce,Object(l["V"])(Object(l["m"])("pre",null,[xe],512),[[c]]),Object(l["V"])(Object(l["m"])("pre",null,[we],512),[[c,void 0,void 0,{script:!0}]]),ze,ke,Se,Object(l["V"])(Object(l["m"])("pre",null,[Ne],512),[[c]]),Object(l["V"])(Object(l["m"])("pre",null,[Ke],512),[[c,void 0,void 0,{script:!0}]]),Me,Object(l["V"])(Object(l["m"])("pre",null,[Fe],512),[[c,void 0,void 0,{script:!0}]]),De,Ve,Object(l["V"])(Object(l["m"])("pre",null,[Pe],512),[[c]]),Ae,Ie,Be,Object(l["V"])(Object(l["m"])("pre",null,[Le],512),[[c]]),Ee,We,Object(l["V"])(Object(l["m"])("pre",null,[Re],512),[[c]]),He,qe,Object(l["V"])(Object(l["m"])("pre",null,[_e],512),[[c]]),Ue,Ge,Object(l["V"])(Object(l["m"])("pre",null,[Je],512),[[c]]),Ye,Ze,Object(l["V"])(Object(l["m"])("pre",null,[$e],512),[[c]]),Qe,Xe,en,nn,tn,Object(l["V"])(Object(l["m"])("pre",null,[ln],512),[[c]]),Object(l["V"])(Object(l["m"])("pre",null,[on],512),[[c,void 0,void 0,{script:!0}]]),an,dn,Object(l["V"])(Object(l["m"])("pre",null,[rn],512),[[c]]),cn,Object(l["V"])(Object(l["m"])("pre",null,[un],512),[[c]]),mn,sn,Object(l["V"])(Object(l["m"])("pre",null,[bn],512),[[c]]),pn,On,Object(l["m"])("div",jn,[Object(l["m"])("table",hn,[fn,Object(l["m"])("tbody",null,[yn,vn,gn,Tn,Cn,xn,wn,zn,kn,Sn,Nn,Object(l["m"])("tr",null,[Kn,Mn,Fn,Object(l["m"])("td",null,[Dn,Object(l["m"])(r,{to:"/paginator"},{default:Object(l["U"])((function(){return[Vn]})),_:1}),Pn])]),An,In,Bn,Ln,En,Wn,Rn,Hn,qn,_n,Un,Gn,Jn,Yn,Zn,$n,Qn,Xn,et,nt,tt,lt,ot,at,dt])])]),rt,it,ct,ut,mt,Object(l["m"])("p",null,[st,Object(l["m"])(r,{to:"/theming"},{default:Object(l["U"])((function(){return[bt]})),_:1}),pt]),Ot,jt,ht]})),_:1},8,["sources"])}var yt={data:function(){return{sources:{"options-api":{tabName:"Options API Source",content:'\n<template>\n    <div>\n        <div class="card">\n            <h5>Basic</h5>\n            <TreeTable :value="nodes">\n                <Column field="name" header="Name" :expander="true"></Column>\n                <Column field="size" header="Size"></Column>\n                <Column field="type" header="Type"></Column>\n            </TreeTable>\n        </div>\n\n        <div class="card">\n            <h5>Dynamic Columns</h5>\n            <TreeTable :value="nodes">\n                <Column v-for="col of columns" :key="col.field"\n                    :field="col.field" :header="col.header" :expander="col.expander"></Column>\n            </TreeTable>\n        </div>\n\n        <div class="card">\n            <h5>Programmatic Control</h5>\n            <div style="margin-bottom: 1em">\n                <Button type="button" icon="pi pi-plus" label="Expand All" @click="expandAll" />\n                <Button type="button" icon="pi pi-minus" label="Collapse All" @click="collapseAll" />\n            </div>\n            <TreeTable :value="nodes" :expandedKeys="expandedKeys">\n                <Column field="name" header="Name" :expander="true"></Column>\n                <Column field="size" header="Size"></Column>\n                <Column field="type" header="Type"></Column>\n            </TreeTable>\n        </div>\n    </div>\n</template>\n\n<script>\nimport NodeService from \'./service/NodeService\';\n\nexport default {\n    data() {\n        return {\n            nodes: null,\n            columns: null,\n            expandedKeys: {}\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n\n        this.columns = [\n            {field: \'name\', header: \'Vin\', expander: true},\n            {field: \'size\', header: \'Size\'},\n            {field: \'type\', header: \'Type\'}\n        ];\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        expandAll() {\n            for (let node of this.nodes) {\n                this.expandNode(node);\n            }\n\n            this.expandedKeys = {...this.expandedKeys};\n        },\n        collapseAll() {\n            this.expandedKeys = {};\n        },\n        expandNode(node) {\n            if (node.children && node.children.length) {\n                this.expandedKeys[node.key] = true;\n\n                for (let child of node.children) {\n                    this.expandNode(child);\n                }\n            }\n        }\n    }\n}\n<\\/script>\n\n<style scoped>\nbutton {\n    margin-right: .5rem;\n}\n</style>'},"composition-api":{tabName:"Composition API Source",content:'\n<template>\n    <div>\n        <div class="card">\n            <h5>Basic</h5>\n            <TreeTable :value="nodes">\n                <Column field="name" header="Name" :expander="true"></Column>\n                <Column field="size" header="Size"></Column>\n                <Column field="type" header="Type"></Column>\n            </TreeTable>\n        </div>\n\n        <div class="card">\n            <h5>Dynamic Columns</h5>\n            <TreeTable :value="nodes">\n                <Column v-for="col of columns" :key="col.field"\n                    :field="col.field" :header="col.header" :expander="col.expander"></Column>\n            </TreeTable>\n        </div>\n\n        <div class="card">\n            <h5>Programmatic Control</h5>\n            <div style="margin-bottom: 1em">\n                <Button type="button" icon="pi pi-plus" label="Expand All" @click="expandAll" />\n                <Button type="button" icon="pi pi-minus" label="Collapse All" @click="collapseAll" />\n            </div>\n            <TreeTable :value="nodes" :expandedKeys="expandedKeys">\n                <Column field="name" header="Name" :expander="true"></Column>\n                <Column field="size" header="Size"></Column>\n                <Column field="type" header="Type"></Column>\n            </TreeTable>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { ref, onMounted } from "vue";\nimport NodeService from \'./service/NodeService\';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            nodeService.value.getTreeTableNodes().then(data => nodes.value = data);\n        })\n        const nodes = ref();\n        const expandedKeys = ref({});\n        const nodeService = ref(new NodeService());\n        const columns = ref([\n            {field: \'name\', header: \'Vin\', expander: true},\n            {field: \'size\', header: \'Size\'},\n            {field: \'type\', header: \'Type\'}\n        ]);\n        const expandAll = () => {\n            for (let node of nodes.value) {\n                expandNode(node);\n            }\n\n            expandedKeys.value = {...expandedKeys.value};\n        };\n        const collapseAll = () => {\n            expandedKeys.value = {};\n        };\n        const expandNode = (node) => {\n            if (node.children && node.children.length) {\n                expandedKeys.value[node.key] = true;\n\n                for (let child of node.children) {\n                    expandNode(child);\n                }\n            }\n        };\n        return { nodes, columns, expandedKeys, nodeService, expandAll, collapseAll, expandNode }\n    }\n}\n<\\/script>\n\n<style scoped>\nbutton {\n    margin-right: .5rem;\n}\n</style>'}}}}};yt.render=ft;var vt=yt,gt={data:function(){return{nodes:null,columns:null,expandedKeys:{}}},nodeService:null,created:function(){this.nodeService=new f["a"],this.columns=[{field:"name",header:"Vin",expander:!0},{field:"size",header:"Size"},{field:"type",header:"Type"}]},mounted:function(){var e=this;this.nodeService.getTreeTableNodes().then((function(n){return e.nodes=n}))},methods:{expandAll:function(){var e,n=Object(h["a"])(this.nodes);try{for(n.s();!(e=n.n()).done;){var t=e.value;this.expandNode(t)}}catch(l){n.e(l)}finally{n.f()}this.expandedKeys=Object(j["a"])({},this.expandedKeys)},collapseAll:function(){this.expandedKeys={}},expandNode:function(e){if(e.children&&e.children.length){this.expandedKeys[e.key]=!0;var n,t=Object(h["a"])(e.children);try{for(t.s();!(n=t.n()).done;){var l=n.value;this.expandNode(l)}}catch(o){t.e(o)}finally{t.f()}}}},components:{TreeTableDoc:vt}};t("c3d2");gt.render=O,gt.__scopeId="data-v-29a8963e";n["default"]=gt},"82f4":function(e,n,t){"use strict";t.d(n,"a",(function(){return r}));var l=t("d4ec"),o=t("bee2"),a=t("bc3a"),d=t.n(a),r=function(){function e(){Object(l["a"])(this,e)}return Object(o["a"])(e,[{key:"getTreeTableNodes",value:function(){return d.a.get("demo/data/treetablenodes.json").then((function(e){return e.data.root}))}},{key:"getTreeNodes",value:function(){return d.a.get("demo/data/treenodes.json").then((function(e){return e.data.root}))}}]),e}()},c3d2:function(e,n,t){"use strict";t("ebb6")},ddd1:function(e,n,t){var l=t("24fb");n=l(!1),n.push([e.i,"button[data-v-29a8963e]{margin-right:.5rem}",""]),e.exports=n},ebb6:function(e,n,t){var l=t("ddd1");l.__esModule&&(l=l.default),"string"===typeof l&&(l=[[e.i,l,""]]),l.locals&&(e.exports=l.locals);var o=t("499e").default;o("3c14b610",l,!0,{sourceMap:!1,shadowMode:!1})}}]);