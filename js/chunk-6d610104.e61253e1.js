(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-6d610104"],{"41bf":function(e,n,t){"use strict";t("d6f7")},"7eaf":function(e,n,t){"use strict";t.r(n);var l=t("7a23"),o=Object(l["Y"])("data-v-e7f0ee32");Object(l["F"])("data-v-e7f0ee32");var i={class:"content-section introduction"},a=Object(l["m"])("div",{class:"feature-intro"},[Object(l["m"])("h1",null,[Object(l["l"])("TreeTable "),Object(l["m"])("span",null,"Scroll")]),Object(l["m"])("p",null,"Data scrolling is available horizontally, vertically or both with support for frozen columns.")],-1),r={class:"content-section implementation"},d={class:"card"},c=Object(l["m"])("h5",null,"Vertical",-1),s={class:"card"},p=Object(l["m"])("h5",null,"Flexible Scroll",-1),u=Object(l["m"])("p",null,"Flex scroll feature makes the scrollable viewport section dynamic insteaf of a fixed value so that it can grow or shrink relative to the parent size of the table. Click the button below to display a maximizable Dialog where data viewport adjusts itself according to the size changes.",-1),m={class:"card"},h=Object(l["m"])("h5",null,"Horizontal and Vertical with Footer",-1),b={class:"card"},f=Object(l["m"])("h5",null,"Frozen Columns",-1);Object(l["D"])();var y=o((function(e,n,t,y,v,x){var w=Object(l["K"])("AppDemoActions"),g=Object(l["K"])("Column"),C=Object(l["K"])("TreeTable"),O=Object(l["K"])("Button"),z=Object(l["K"])("Dialog"),j=Object(l["K"])("ToggleButton"),T=Object(l["K"])("AppDoc");return Object(l["C"])(),Object(l["h"])("div",null,[Object(l["m"])("div",i,[a,Object(l["m"])(w)]),Object(l["m"])("div",r,[Object(l["m"])("div",d,[c,Object(l["m"])(C,{value:v.nodes,style:{"margin-bottom":"2rem"},scrollable:!0,scrollHeight:"400px"},{default:o((function(){return[Object(l["m"])(g,{field:"name",header:"Name",expander:!0,style:{"min-width":"200px"}}),Object(l["m"])(g,{field:"size",header:"Size",style:{"min-width":"200px"}}),Object(l["m"])(g,{field:"type",header:"Type",style:{"min-width":"200px"}})]})),_:1},8,["value"])]),Object(l["m"])("div",s,[p,u,Object(l["m"])(O,{label:"Show",icon:"pi pi-external-link",onClick:x.openDialog},null,8,["onClick"])]),Object(l["m"])(z,{header:"Flex Scroll",visible:v.dialogVisible,"onUpdate:visible":n[1]||(n[1]=function(e){return v.dialogVisible=e}),style:{width:"75vw"},maximizable:!0,modal:!0,contentStyle:{height:"300px"}},{footer:o((function(){return[Object(l["m"])(O,{label:"Ok",icon:"pi pi-check",onClick:x.closeDialog},null,8,["onClick"])]})),default:o((function(){return[Object(l["m"])(C,{value:v.nodes,scrollable:!0,scrollHeight:"flex"},{default:o((function(){return[Object(l["m"])(g,{field:"name",header:"Name",expander:!0,style:{"min-width":"200px"}}),Object(l["m"])(g,{field:"size",header:"Size",style:{"min-width":"200px"}}),Object(l["m"])(g,{field:"type",header:"Type",style:{"min-width":"200px"}})]})),_:1},8,["value"])]})),_:1},8,["visible"]),Object(l["m"])("div",m,[h,Object(l["m"])(C,{value:v.nodes,scrollable:!0,scrollHeight:"400px",scrollDirection:"both"},{default:o((function(){return[Object(l["m"])(g,{field:"name",header:"Name",footer:"Name",expander:!0,style:{width:"300px"}}),Object(l["m"])(g,{header:"Key",footer:"Key",style:{width:"300px"}},{body:o((function(e){var n=e.node;return[Object(l["l"])(Object(l["O"])(n.key),1)]})),_:1}),Object(l["m"])(g,{field:"size",header:"Size",footer:"Size",style:{width:"300px"}}),Object(l["m"])(g,{field:"type",header:"Type",footer:"Type",style:{width:"300px"}}),Object(l["m"])(g,{header:"Children",footer:"Children",style:{width:"300px"}},{body:o((function(e){var n=e.node;return[Object(l["l"])(Object(l["O"])(n.children?n.children.length:0),1)]})),_:1}),Object(l["m"])(g,{header:"Options",footer:"Options",style:{width:"300px"}},{body:o((function(){return[Object(l["m"])(O,{type:"Button",icon:"pi pi-check",label:"Edit",class:"p-mr-2"}),Object(l["m"])(O,{type:"Button",icon:"pi pi-check",label:"Delete",class:"p-button-warning"})]})),_:1})]})),_:1},8,["value"])]),Object(l["m"])("div",b,[f,Object(l["m"])(j,{modelValue:v.optionsFrozen,"onUpdate:modelValue":n[2]||(n[2]=function(e){return v.optionsFrozen=e}),onIcon:"pi pi-lock",offIcon:"pi pi-lock-open",onLabel:"Unfreeze Options",offLabel:"Freeze Options",style:{width:"12rem"}},null,8,["modelValue"]),Object(l["m"])(C,{value:v.nodes,scrollable:!0,scrollHeight:"400px",scrollDirection:"both",class:"p-mt-3"},{default:o((function(){return[Object(l["m"])(g,{field:"name",header:"Name",expander:!0,style:{width:"300px"},frozen:""}),Object(l["m"])(g,{header:"Key",style:{width:"300px"}},{body:o((function(e){var n=e.node;return[Object(l["l"])(Object(l["O"])(n.key),1)]})),_:1}),Object(l["m"])(g,{field:"size",header:"Size",style:{width:"300px"}}),Object(l["m"])(g,{field:"type",header:"Type",style:{width:"300px"}}),Object(l["m"])(g,{header:"Children",style:{width:"300px"}},{body:o((function(e){var n=e.node;return[Object(l["l"])(Object(l["O"])(n.children?n.children.length:0),1)]})),_:1}),Object(l["m"])(g,{header:"Options",style:{width:"200px"},alignFrozen:"right",frozen:v.optionsFrozen},{body:o((function(){return[Object(l["m"])(O,{type:"Button",icon:"pi pi-check",label:"Edit Item",class:"p-mr-2",style:{width:"100%"}})]})),_:1},8,["frozen"])]})),_:1},8,["value"])])]),Object(l["m"])(T,{name:"TreeTableScrollDemo",sources:v.sources,service:["NodeService"],data:["treetablenodes"],github:"treetable/TreeTableSizeDemo.vue"},null,8,["sources"])])})),v=t("82f4"),x={data:function(){return{nodes:null,dialogVisible:!1,optionsFrozen:!1,sources:{"options-api":{tabName:"Options API Source",content:'\n<template>\n    <div>\n        <div class="card">\n            <h5>Vertical</h5>\n            <TreeTable :value="nodes" style="margin-bottom: 2rem" :scrollable="true" scrollHeight="400px">\n                <Column field="name" header="Name" :expander="true" style="min-width:200px"></Column>\n                <Column field="size" header="Size" style="min-width:200px"></Column>\n                <Column field="type" header="Type" style="min-width:200px"></Column>\n            </TreeTable>\n        </div>\n\n        <div class="card">\n            <h5>Flexible Scroll</h5>\n            <p>Flex scroll feature makes the scrollable viewport section dynamic insteaf of a fixed value so that it can grow or shrink relative to the parent size of the table.\n                Click the button below to display a maximizable Dialog where data viewport adjusts itself according to the size changes.</p>\n\n            <Button label="Show" icon="pi pi-external-link" @click="openDialog" />\n        </div>\n\n        <Dialog header="Flex Scroll" v-model:visible="dialogVisible" :style="{width: \'75vw\'}" :maximizable="true" :modal="true" :contentStyle="{height: \'300px\'}">\n                <TreeTable :value="nodes" :scrollable="true" scrollHeight="flex">\n                <Column field="name" header="Name" :expander="true" style="min-width:200px"></Column>\n                <Column field="size" header="Size" style="min-width:200px"></Column>\n                <Column field="type" header="Type" style="min-width:200px"></Column>\n            </TreeTable>\n            <template #footer>\n                <Button label="Ok" icon="pi pi-check" @click="closeDialog" />\n            </template>\n        </Dialog>\n\n        <div class="card">\n            <h5>Horizontal and Vertical with Footer</h5>\n            <TreeTable :value="nodes" :scrollable="true" scrollHeight="400px" scrollDirection="both">\n                <Column field="name" header="Name" footer="Name" :expander="true" style="width:300px"></Column>\n                <Column header="Key" footer="Key" style="width:300px">\n                    <template #body="{node}">\n                        {{node.key}}\n                    </template>\n                </Column>\n                <Column field="size" header="Size" footer="Size" style="width:300px"></Column>\n                <Column field="type" header="Type" footer="Type" style="width:300px"></Column>\n                <Column header="Children" footer="Children" style="width:300px">\n                    <template #body="{node}">\n                        {{node.children ? node.children.length : 0}}\n                    </template>\n                </Column>\n                <Column header="Options" footer="Options" style="width:300px">\n                    <template #body>\n                        <Button type="Button" icon="pi pi-check" label="Edit" class="p-mr-2"></Button>\n                        <Button type="Button" icon="pi pi-check" label="Delete" class="p-button-warning"></Button>\n                    </template>\n                </Column>\n            </TreeTable>\n        </div>\n\n        <div class="card">\n            <h5>Frozen Columns</h5>\n            <ToggleButton v-model="optionsFrozen" onIcon="pi pi-lock" offIcon="pi pi-lock-open" onLabel="Unfreeze Options" offLabel="Freeze Options" style="width: 12rem" />\n\n            <TreeTable :value="nodes" :scrollable="true" scrollHeight="400px" scrollDirection="both" class="p-mt-3">\n                <Column field="name" header="Name" :expander="true" style="width:300px" frozen></Column>\n                <Column header="Key" style="width:300px">\n                    <template #body="{node}">\n                        {{node.key}}\n                    </template>\n                </Column>\n                <Column field="size" header="Size" style="width:300px"></Column>\n                <Column field="type" header="Type" style="width:300px"></Column>\n                <Column header="Children" style="width:300px">\n                    <template #body="{node}">\n                        {{node.children ? node.children.length : 0}}\n                    </template>\n                </Column>\n                <Column header="Options" style="width:200px" alignFrozen="right" :frozen="optionsFrozen">\n                    <template #body>\n                        <Button type="Button" icon="pi pi-check" label="Edit Item" class="p-mr-2" style="width:100%"></Button>\n                    </template>\n                </Column>\n            </TreeTable>\n        </div>\n    </div>                    \n</template>\n\n<script>\nimport NodeService from \'./service/NodeService\';\n\nexport default {\n    data() {\n        return {\n            nodes: null,\n            dialogVisible: false,\n            optionsFrozen: false\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        openDialog() {\n            this.dialogVisible = true;\n        },\n        closeDialog() {\n            this.dialogVisible = false;\n        }\n    }\n}\n<\\/script>\n'},"composition-api":{tabName:"Composition API Source",content:'\n<template>\n    <div>\n        <div class="card">\n            <h5>Vertical</h5>\n            <TreeTable :value="nodes" style="margin-bottom: 2rem" :scrollable="true" scrollHeight="400px">\n                <Column field="name" header="Name" :expander="true" style="min-width:200px"></Column>\n                <Column field="size" header="Size" style="min-width:200px"></Column>\n                <Column field="type" header="Type" style="min-width:200px"></Column>\n            </TreeTable>\n        </div>\n\n        <div class="card">\n            <h5>Flexible Scroll</h5>\n            <p>Flex scroll feature makes the scrollable viewport section dynamic insteaf of a fixed value so that it can grow or shrink relative to the parent size of the table.\n                Click the button below to display a maximizable Dialog where data viewport adjusts itself according to the size changes.</p>\n\n            <Button label="Show" icon="pi pi-external-link" @click="openDialog" />\n        </div>\n\n        <Dialog header="Flex Scroll" v-model:visible="dialogVisible" :style="{width: \'75vw\'}" :maximizable="true" :modal="true" :contentStyle="{height: \'300px\'}">\n                <TreeTable :value="nodes" :scrollable="true" scrollHeight="flex">\n                <Column field="name" header="Name" :expander="true" style="min-width:200px"></Column>\n                <Column field="size" header="Size" style="min-width:200px"></Column>\n                <Column field="type" header="Type" style="min-width:200px"></Column>\n            </TreeTable>\n            <template #footer>\n                <Button label="Ok" icon="pi pi-check" @click="closeDialog" />\n            </template>\n        </Dialog>\n\n        <div class="card">\n            <h5>Horizontal and Vertical with Footer</h5>\n            <TreeTable :value="nodes" :scrollable="true" scrollHeight="400px" scrollDirection="both">\n                <Column field="name" header="Name" footer="Name" :expander="true" style="width:300px"></Column>\n                <Column header="Key" footer="Key" style="width:300px">\n                    <template #body="{node}">\n                        {{node.key}}\n                    </template>\n                </Column>\n                <Column field="size" header="Size" footer="Size" style="width:300px"></Column>\n                <Column field="type" header="Type" footer="Type" style="width:300px"></Column>\n                <Column header="Children" footer="Children" style="width:300px">\n                    <template #body="{node}">\n                        {{node.children ? node.children.length : 0}}\n                    </template>\n                </Column>\n                <Column header="Options" footer="Options" style="width:300px">\n                    <template #body>\n                        <Button type="Button" icon="pi pi-check" label="Edit" class="p-mr-2"></Button>\n                        <Button type="Button" icon="pi pi-check" label="Delete" class="p-button-warning"></Button>\n                    </template>\n                </Column>\n            </TreeTable>\n        </div>\n\n        <div class="card">\n            <h5>Frozen Columns</h5>\n            <ToggleButton v-model="optionsFrozen" onIcon="pi pi-lock" offIcon="pi pi-lock-open" onLabel="Unfreeze Options" offLabel="Freeze Options" style="width: 12rem" />\n\n            <TreeTable :value="nodes" :scrollable="true" scrollHeight="400px" scrollDirection="both" class="p-mt-3">\n                <Column field="name" header="Name" :expander="true" style="width:300px" frozen></Column>\n                <Column header="Key" style="width:300px">\n                    <template #body="{node}">\n                        {{node.key}}\n                    </template>\n                </Column>\n                <Column field="size" header="Size" style="width:300px"></Column>\n                <Column field="type" header="Type" style="width:300px"></Column>\n                <Column header="Children" style="width:300px">\n                    <template #body="{node}">\n                        {{node.children ? node.children.length : 0}}\n                    </template>\n                </Column>\n                <Column header="Options" style="width:200px" alignFrozen="right" :frozen="optionsFrozen">\n                    <template #body>\n                        <Button type="Button" icon="pi pi-check" label="Edit Item" class="p-mr-2" style="width:100%"></Button>\n                    </template>\n                </Column>\n            </TreeTable>\n        </div>\n    </div>                    \n</template>\n\n<script>\nimport { ref, onMounted } from \'vue\';\nimport NodeService from \'./service/NodeService\';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            nodeService.value.getTreeTableNodes().then(data => nodes.value = data);\n        })\n\n        const nodes = ref();\n        const nodeService = ref(new NodeService());\n        const dialogVisible = ref(false);\n        const optionsFrozen = ref(false);\n\n        const openDialog = () => {\n            dialogVisible.value = true;\n        };\n        const closeDialog = () => {\n            dialogVisible.value = false;\n        };\n\n        return { nodes, openDialog, closeDialog, dialogVisible, optionsFrozen }\n    }\n}\n<\\/script>\n'}}}},nodeService:null,created:function(){this.nodeService=new v["a"]},mounted:function(){var e=this;this.nodeService.getTreeTableNodes().then((function(n){return e.nodes=n}))},methods:{openDialog:function(){this.dialogVisible=!0},closeDialog:function(){this.dialogVisible=!1}}};t("41bf");x.render=y,x.__scopeId="data-v-e7f0ee32";n["default"]=x},"82f4":function(e,n,t){"use strict";t.d(n,"a",(function(){return r}));var l=t("d4ec"),o=t("bee2"),i=t("bc3a"),a=t.n(i),r=function(){function e(){Object(l["a"])(this,e)}return Object(o["a"])(e,[{key:"getTreeTableNodes",value:function(){return a.a.get("demo/data/treetablenodes.json").then((function(e){return e.data.root}))}},{key:"getTreeNodes",value:function(){return a.a.get("demo/data/treenodes.json").then((function(e){return e.data.root}))}}]),e}()},9725:function(e,n,t){var l=t("24fb");n=l(!1),n.push([e.i,"[data-v-e7f0ee32] .p-treetable-scrollable .p-frozen-column{font-weight:700}",""]),e.exports=n},d6f7:function(e,n,t){var l=t("9725");l.__esModule&&(l=l.default),"string"===typeof l&&(l=[[e.i,l,""]]),l.locals&&(e.exports=l.locals);var o=t("499e").default;o("16175a43",l,!0,{sourceMap:!1,shadowMode:!1})}}]);