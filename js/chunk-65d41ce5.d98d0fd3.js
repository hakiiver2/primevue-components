(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-65d41ce5"],{"62ae":function(e,t,n){"use strict";n.r(t);var o=n("7a23"),l=Object(o["Y"])("data-v-ce445f10");Object(o["F"])("data-v-ce445f10");var a={class:"content-section introduction"},i=Object(o["m"])("div",{class:"feature-intro"},[Object(o["m"])("h1",null,[Object(o["l"])("DataTable "),Object(o["m"])("span",null,"InCell Edit")]),Object(o["m"])("p",null,"In cell editing provides a rapid and user friendly way to manipulate the data. The datatable provides a flexible API so that the editing behavior is implemented by the page author whether it utilizes v-model or vuex. ")],-1),d={class:"content-section implementation p-fluid"},s={class:"card"},r=Object(o["m"])("h5",null,"Basic Cell Editing",-1),u=Object(o["m"])("p",null,"Simple editors with v-model.",-1),c={class:"card"},p=Object(o["m"])("h5",null,"Advanced Cell Editing",-1),m=Object(o["m"])("p",null,"Custom implementation with validations, dynamic columns and reverting values with the escape key.",-1),v={class:"card"},f=Object(o["m"])("h5",null,"Row Editing",-1);Object(o["D"])();var h=l((function(e,t,n,h,b,w){var C=Object(o["K"])("AppDemoActions"),g=Object(o["K"])("InputText"),S=Object(o["K"])("Column"),O=Object(o["K"])("Dropdown"),P=Object(o["K"])("DataTable"),y=Object(o["K"])("AppDoc");return Object(o["C"])(),Object(o["h"])("div",null,[Object(o["m"])("div",a,[i,Object(o["m"])(C)]),Object(o["m"])("div",d,[Object(o["m"])("div",s,[r,u,Object(o["m"])(P,{value:b.products1,editMode:"cell",class:"editable-cells-table",responsiveLayout:"scroll"},{default:l((function(){return[Object(o["m"])(S,{field:"code",header:"Code",style:{width:"25%"}},{editor:l((function(e){return[Object(o["m"])(g,{modelValue:e.data[e.column.props.field],"onUpdate:modelValue":function(t){return e.data[e.column.props.field]=t}},null,8,["modelValue","onUpdate:modelValue"])]})),_:1}),Object(o["m"])(S,{field:"name",header:"Name",style:{width:"25%"}},{editor:l((function(e){return[Object(o["m"])(g,{modelValue:e.data[e.column.props.field],"onUpdate:modelValue":function(t){return e.data[e.column.props.field]=t}},null,8,["modelValue","onUpdate:modelValue"])]})),_:1}),Object(o["m"])(S,{field:"inventoryStatus",header:"Status",style:{width:"25%"}},{editor:l((function(e){return[Object(o["m"])(O,{modelValue:e.data["inventoryStatus"],"onUpdate:modelValue":function(t){return e.data["inventoryStatus"]=t},options:b.statuses,optionLabel:"label",optionValue:"value",laceholder:"Select a Status"},{option:l((function(e){return[Object(o["m"])("span",{class:"product-badge status-"+e.option.value.toLowerCase()},Object(o["O"])(e.option.label),3)]})),_:2},1032,["modelValue","onUpdate:modelValue","options"])]})),body:l((function(e){return[Object(o["l"])(Object(o["O"])(w.getStatusLabel(e.data.inventoryStatus)),1)]})),_:1}),Object(o["m"])(S,{field:"price",header:"Price",style:{width:"25%"}},{editor:l((function(e){return[Object(o["m"])(g,{modelValue:e.data[e.column.props.field],"onUpdate:modelValue":function(t){return e.data[e.column.props.field]=t}},null,8,["modelValue","onUpdate:modelValue"])]})),_:1})]})),_:1},8,["value"])]),Object(o["m"])("div",c,[p,m,Object(o["m"])(P,{value:b.products2,editMode:"cell",onCellEditComplete:w.onCellEditComplete,class:"editable-cells-table",responsiveLayout:"scroll"},{default:l((function(){return[(Object(o["C"])(!0),Object(o["h"])(o["a"],null,Object(o["I"])(b.columns,(function(e){return Object(o["C"])(),Object(o["h"])(S,{field:e.field,header:e.header,key:e.field,style:{width:"25%"}},{editor:l((function(e){return[Object(o["m"])(g,{modelValue:e.data[e.column.props.field],"onUpdate:modelValue":function(t){return w.onCellEdit(t,e)}},null,8,["modelValue","onUpdate:modelValue"])]})),_:2},1032,["field","header"])})),128))]})),_:1},8,["value","onCellEditComplete"])]),Object(o["m"])("div",v,[f,Object(o["m"])(P,{value:b.products3,editMode:"row",dataKey:"id",editingRows:b.editingRows,"onUpdate:editingRows":t[1]||(t[1]=function(e){return b.editingRows=e}),onRowEditInit:w.onRowEditInit,onRowEditCancel:w.onRowEditCancel,responsiveLayout:"scroll"},{default:l((function(){return[Object(o["m"])(S,{field:"code",header:"Code",style:{width:"20%"}},{editor:l((function(e){return[Object(o["m"])(g,{modelValue:e.data[e.column.props.field],"onUpdate:modelValue":function(t){return e.data[e.column.props.field]=t},autofocus:""},null,8,["modelValue","onUpdate:modelValue"])]})),_:1}),Object(o["m"])(S,{field:"name",header:"Name",style:{width:"20%"}},{editor:l((function(e){return[Object(o["m"])(g,{modelValue:e.data[e.column.props.field],"onUpdate:modelValue":function(t){return e.data[e.column.props.field]=t}},null,8,["modelValue","onUpdate:modelValue"])]})),_:1}),Object(o["m"])(S,{field:"inventoryStatus",header:"Status",style:{width:"20%"}},{editor:l((function(e){return[Object(o["m"])(O,{modelValue:e.data["inventoryStatus"],"onUpdate:modelValue":function(t){return e.data["inventoryStatus"]=t},options:b.statuses,optionLabel:"label",optionValue:"value",placeholder:"Select a Status"},{option:l((function(e){return[Object(o["m"])("span",{class:"product-badge status-"+e.option.value.toLowerCase()},Object(o["O"])(e.option.label),3)]})),_:2},1032,["modelValue","onUpdate:modelValue","options"])]})),body:l((function(e){return[Object(o["l"])(Object(o["O"])(w.getStatusLabel(e.data.inventoryStatus)),1)]})),_:1}),Object(o["m"])(S,{field:"price",header:"Price",style:{width:"20%"}},{editor:l((function(e){return[Object(o["m"])(g,{modelValue:e.data[e.column.props.field],"onUpdate:modelValue":function(t){return e.data[e.column.props.field]=t}},null,8,["modelValue","onUpdate:modelValue"])]})),_:1}),Object(o["m"])(S,{rowEditor:!0,style:{width:"10%","min-width":"8rem"},bodyStyle:"text-align:center"})]})),_:1},8,["value","editingRows","onRowEditInit","onRowEditCancel"])])]),Object(o["m"])(y,{name:"DataTableEditDemo",sources:b.sources,service:["ProductService"],data:["products-small"],github:"datatable/DataTableEditDemo.vue"},null,8,["sources"])])})),b=n("5530"),w=(n("498a"),n("ac1f"),n("5319"),n("a9e3"),n("e9c0")),C={data:function(){return{editingCellRows:{},editingRows:[],columns:null,products1:null,products2:null,products3:null,statuses:[{label:"In Stock",value:"INSTOCK"},{label:"Low Stock",value:"LOWSTOCK"},{label:"Out of Stock",value:"OUTOFSTOCK"}],sources:{"options-api":{tabName:"Options API Source",content:'\n<template>\n    <div class="p-fluid">\n        <div class="card">\n            <h5>Basic Cell Editing</h5>\n            <p>Simple editors with v-model.</p>\n            <DataTable :value="products1" editMode="cell" class="editable-cells-table" responsiveLayout="scroll">\n                <Column field="code" header="Code" style="width:25%">\n                    <template #editor="slotProps">\n                        <InputText v-model="slotProps.data[slotProps.column.props.field]" />\n                    </template>\n                </Column>\n                <Column field="name" header="Name" style="width:25%">\n                    <template #editor="slotProps">\n                        <InputText v-model="slotProps.data[slotProps.column.props.field]" />\n                    </template>\n                </Column>\n                <Column field="inventoryStatus" header="Status" style="width:25%">\n                    <template #editor="slotProps">\n                        <Dropdown v-model="slotProps.data[\'inventoryStatus\']" :options="statuses" optionLabel="label" optionValue="value" placeholder="Select a Status">\n                            <template #option="slotProps">\n                                <span :class="\'product-badge status-\' + slotProps.option.value.toLowerCase()">{{slotProps.option.label}}</span>\n                            </template>\n                        </Dropdown>\n                    </template>\n                    <template #body="slotProps">\n                        {{getStatusLabel(slotProps.data.inventoryStatus)}}\n                    </template>\n                </Column>\n                <Column field="price" header="Price" style="width:25%">\n                    <template #editor="slotProps">\n                        <InputText v-model="slotProps.data[slotProps.column.props.field]" />\n                    </template>\n                </Column>\n            </DataTable>\n        </div>\n\n        <div class="card">\n            <h5>Advanced Cell Editing</h5>\n            <p>Custom implementation with validations, dynamic columns and reverting values with the escape key.</p>\n            <DataTable :value="products2" editMode="cell" @cellEditComplete="onCellEditComplete" class="editable-cells-table" responsiveLayout="scroll">\n                <Column v-for="col of columns" :field="col.field" :header="col.header" :key="col.field" style="width:25%">\n                    <template #editor="slotProps">\n                        <InputText :modelValue="slotProps.data[slotProps.column.props.field]" @update:modelValue="onCellEdit($event, slotProps)" />\n                    </template>\n                </Column>\n            </DataTable>\n        </div>\n\n        <div class="card">\n            <h5>Row Editing</h5>\n            <DataTable :value="products3" editMode="row" dataKey="id" v-model:editingRows="editingRows"\n                @rowEditInit="onRowEditInit" @rowEditCancel="onRowEditCancel" responsiveLayout="scroll">\n                <Column field="code" header="Code" style="width:20%">\n                    <template #editor="slotProps">\n                        <InputText v-model="slotProps.data[slotProps.column.props.field]" autofocus />\n                    </template>\n                </Column>\n                <Column field="name" header="Name" style="width:20%">\n                    <template #editor="slotProps">\n                        <InputText v-model="slotProps.data[slotProps.column.props.field]" />\n                    </template>\n                </Column>\n                <Column field="inventoryStatus" header="Status" style="width:20%">\n                    <template #editor="slotProps">\n                        <Dropdown v-model="slotProps.data[\'inventoryStatus\']" :options="statuses" optionLabel="label" optionValue="value" laceholder="Select a Status">\n                            <template #option="slotProps">\n                                <span :class="\'product-badge status-\' + slotProps.option.value.toLowerCase()">{{slotProps.option.label}}</span>\n                            </template>\n                        </Dropdown>\n                    </template>\n                    <template #body="slotProps">\n                        {{getStatusLabel(slotProps.data.inventoryStatus)}}\n                    </template>\n                </Column>\n                <Column field="price" header="Price" style="width:20%">\n                    <template #editor="slotProps">\n                        <InputText v-model="slotProps.data[slotProps.column.props.field]" />\n                    </template>\n                </Column>\n                <Column :rowEditor="true" style="width: 10%; min-width:8rem" bodyStyle="text-align:center"></Column>\n            </DataTable>\n        </div>\n    </div>                    \n</template>\n\n<script>\nimport ProductService from \'./service/ProductService\';\n\nexport default {\n    data() {\n        return {\n            editingCellRows: {},\n            editingRows: [],\n            columns: null,\n            products1: null,\n            products2: null,\n            products3: null,\n            statuses: [\n                {label: \'In Stock\', value: \'INSTOCK\'},\n                {label: \'Low Stock\', value: \'LOWSTOCK\'},\n                {label: \'Out of Stock\', value: \'OUTOFSTOCK\'}\n            ]\n        }\n    },\n    originalRows: null,\n    productService: null,\n    created() {\n        this.productService = new ProductService();\n\n        this.columns = [\n            {field: \'code\', header: \'Code\'},\n            {field: \'name\', header: \'Name\'},\n            {field: \'quantity\', header: \'Quantity\'},\n            {field: \'price\', header: \'Price\'}\n        ];\n\n        this.originalRows = {};\n    },\n    methods: {\n        onCellEditComplete(event) {\n            if (!this.editingCellRows[event.index]) {\n                return;\n            }\n\n            const editingCellValue = this.editingCellRows[event.index][event.field];\n\n            switch (event.field) {\n                case \'quantity\':\n                case \'price\':\n                    if (this.isPositiveInteger(editingCellValue))\n                        this.products2[event.index] = {...this.editingCellRows[event.index]};\n                    else\n                        event.preventDefault();\n                break;\n\n                default:\n                    if (editingCellValue.trim().length > 0)\n                        this.products2[event.index] = {...this.editingCellRows[event.index]};\n                    else\n                        event.preventDefault();\n                break;\n            }\n        },\n        onCellEdit(newValue, props) {\n            if (!this.editingCellRows[props.index]) {\n                this.editingCellRows[props.index] = {...props.data};\n            }\n\n            this.editingCellRows[props.index][props.column.props.field] = newValue;\n        },\n        isPositiveInteger(val) {\n            let str = String(val);\n            str = str.trim();\n            if (!str) {\n                return false;\n            }\n            str = str.replace(/^0+/, "") || "0";\n            var n = Math.floor(Number(str));\n            return n !== Infinity && String(n) === str && n >= 0;\n        },\n        onRowEditInit(event) {\n            this.originalRows[event.index] = {...this.products3[event.index]};\n        },\n        onRowEditCancel(event) {\n            this.products3[event.index] = this.originalRows[event.index];\n        },\n        getStatusLabel(status) {\n            switch(status) {\n                case \'INSTOCK\':\n                    return \'In Stock\';\n\n                case \'LOWSTOCK\':\n                    return \'Low Stock\';\n\n                case \'OUTOFSTOCK\':\n                    return \'Out of Stock\';\n\n                default:\n                    return \'NA\';\n            }\n        }\n    },\n    mounted() {\n        this.productService.getProductsSmall().then(data => this.products1 = data);\n        this.productService.getProductsSmall().then(data => this.products2 = data);\n        this.productService.getProductsSmall().then(data => this.products3 = data);\n    }\n}\n<\\/script>\n\n<style lang="scss" scoped>\n::v-deep(.editable-cells-table td.p-cell-editing) {\n    padding-top: 0;\n    padding-bottom: 0;\n}\n</style>'},"composition-api":{tabName:"Composition API Source",content:'\n<template>\n    <div class="p-fluid">\n        <div class="card">\n            <h5>Basic Cell Editing</h5>\n            <p>Simple editors with v-model.</p>\n            <DataTable :value="products1" editMode="cell" class="editable-cells-table" responsiveLayout="scroll">\n                <Column field="code" header="Code" style="width:25%">\n                    <template #editor="slotProps">\n                        <InputText v-model="slotProps.data[slotProps.column.props.field]" />\n                    </template>\n                </Column>\n                <Column field="name" header="Name" style="width:25%">\n                    <template #editor="slotProps">\n                        <InputText v-model="slotProps.data[slotProps.column.props.field]" />\n                    </template>\n                </Column>\n                <Column field="inventoryStatus" header="Status" style="width:25%">\n                    <template #editor="slotProps">\n                        <Dropdown v-model="slotProps.data[\'inventoryStatus\']" :options="statuses" optionLabel="label" optionValue="value" placeholder="Select a Status">\n                            <template #option="slotProps">\n                                <span :class="\'product-badge status-\' + slotProps.option.value.toLowerCase()">{{slotProps.option.label}}</span>\n                            </template>\n                        </Dropdown>\n                    </template>\n                    <template #body="slotProps">\n                        {{getStatusLabel(slotProps.data.inventoryStatus)}}\n                    </template>\n                </Column>\n                <Column field="price" header="Price" style="width:25%">\n                    <template #editor="slotProps">\n                        <InputText v-model="slotProps.data[slotProps.column.props.field]" />\n                    </template>\n                </Column>\n            </DataTable>\n        </div>\n\n        <div class="card">\n            <h5>Advanced Cell Editing</h5>\n            <p>Custom implementation with validations, dynamic columns and reverting values with the escape key.</p>\n            <DataTable :value="products2" editMode="cell" @cellEditComplete="onCellEditComplete" class="editable-cells-table" responsiveLayout="scroll">\n                <Column v-for="col of columns" :field="col.field" :header="col.header" :key="col.field" style="width:25%">\n                    <template #editor="slotProps">\n                        <InputText :modelValue="slotProps.data[slotProps.column.props.field]" @update:modelValue="onCellEdit($event, slotProps)" />\n                    </template>\n                </Column>\n            </DataTable>\n        </div>\n\n        <div class="card">\n            <h5>Row Editing</h5>\n            <DataTable :value="products3" editMode="row" dataKey="id" v-model:editingRows="editingRows"\n                @rowEditInit="onRowEditInit" @rowEditCancel="onRowEditCancel" responsiveLayout="scroll">\n                <Column field="code" header="Code" style="width:20%">\n                    <template #editor="slotProps">\n                        <InputText v-model="slotProps.data[slotProps.column.props.field]" autofocus />\n                    </template>\n                </Column>\n                <Column field="name" header="Name" style="width:20%">\n                    <template #editor="slotProps">\n                        <InputText v-model="slotProps.data[slotProps.column.props.field]" />\n                    </template>\n                </Column>\n                <Column field="inventoryStatus" header="Status" style="width:20%">\n                    <template #editor="slotProps">\n                        <Dropdown v-model="slotProps.data[\'inventoryStatus\']" :options="statuses" optionLabel="label" optionValue="value" laceholder="Select a Status">\n                            <template #option="slotProps">\n                                <span :class="\'product-badge status-\' + slotProps.option.value.toLowerCase()">{{slotProps.option.label}}</span>\n                            </template>\n                        </Dropdown>\n                    </template>\n                    <template #body="slotProps">\n                        {{getStatusLabel(slotProps.data.inventoryStatus)}}\n                    </template>\n                </Column>\n                <Column field="price" header="Price" style="width:20%">\n                    <template #editor="slotProps">\n                        <InputText v-model="slotProps.data[slotProps.column.props.field]" />\n                    </template>\n                </Column>\n                <Column :rowEditor="true" style="width: 10%; min-width:8rem" bodyStyle="text-align:center"></Column>\n            </DataTable>\n        </div>\n    </div>                    \n</template>\n\n<script>\nimport { ref, onMounted } from \'vue\';\nimport ProductService from \'./service/ProductService\';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            productService.value.getProductsSmall().then(data => products1.value = data);\n            productService.value.getProductsSmall().then(data => products2.value = data);\n            productService.value.getProductsSmall().then(data => products3.value = data);\n        })\n\n        const productService = ref(new ProductService());\n        const editingCellRows = ref({});\n        const editingRows = ref([]);\n        const columns = ref([\n            {field: \'code\', header: \'Code\'},\n            {field: \'name\', header: \'Name\'},\n            {field: \'quantity\', header: \'Quantity\'},\n            {field: \'price\', header: \'Price\'}\n        ]);\n        const products1 = ref(null);\n        const products2 = ref(null);\n        const products3 = ref(null);\n        const originalRows = ref({});\n        const statuses = ref([\n            {label: \'In Stock\', value: \'INSTOCK\'},\n            {label: \'Low Stock\', value: \'LOWSTOCK\'},\n            {label: \'Out of Stock\', value: \'OUTOFSTOCK\'}\n        ]);\n\n        const onCellEditComplete = (event) => {\n            if (!editingCellRows.value[event.index]) {\n                return;\n            }\n\n            const editingCellValue = editingCellRows.value[event.index][event.field];\n\n            switch (event.field) {\n                case \'quantity\':\n                case \'price\':\n                    if (isPositiveInteger(editingCellValue))\n                        products2.value[event.index] = {...editingCellRows.value[event.index]};\n                    else\n                        event.preventDefault();\n                break;\n\n                default:\n                    if (editingCellValue.trim().length > 0)\n                        products2.value[event.index] = {...editingCellRows.value[event.index]};\n                    else\n                        event.preventDefault();\n                break;\n            }\n        };\n        const onCellEdit = (newValue, props) => {\n            if (!editingCellRows.value[props.index]) {\n                editingCellRows.value[props.index] = {...props.data};\n            }\n\n            editingCellRows.value[props.index][props.column.props.field] = newValue;\n        };\n        const isPositiveInteger = (val) => {\n            let str = String(val);\n            str = str.trim();\n            if (!str) {\n                return false;\n            }\n            str = str.replace(/^0+/, "") || "0";\n            var n = Math.floor(Number(str));\n            return n !== Infinity && String(n) === str && n >= 0;\n        };\n        const onRowEditInit = (event) => {\n            originalRows.value[event.index] = {...products3.value[event.index]};\n        };\n        const onRowEditCancel = (event) => {\n            products3.value[event.index] = originalRows.value[event.index];\n        };\n        const getStatusLabel = (status) => {\n            switch(status) {\n                case \'INSTOCK\':\n                    return \'In Stock\';\n\n                case \'LOWSTOCK\':\n                    return \'Low Stock\';\n\n                case \'OUTOFSTOCK\':\n                    return \'Out of Stock\';\n\n                default:\n                    return \'NA\';\n            }\n        };\n\n        return { productService, editingCellRows, editingRows, columns, products1, products2, products3, originalRows, statuses, onCellEditComplete,\n            onCellEdit, isPositiveInteger, onRowEditInit, onRowEditCancel, getStatusLabel }\n    }\n}\n<\\/script>\n\n<style lang="scss" scoped>\n::v-deep(.editable-cells-table td.p-cell-editing) {\n    padding-top: 0;\n    padding-bottom: 0;\n}\n</style>'}}}},originalRows:null,productService:null,created:function(){this.productService=new w["a"],this.columns=[{field:"code",header:"Code"},{field:"name",header:"Name"},{field:"quantity",header:"Quantity"},{field:"price",header:"Price"}],this.originalRows={}},methods:{onCellEditComplete:function(e){if(this.editingCellRows[e.index]){var t=this.editingCellRows[e.index][e.field];switch(e.field){case"quantity":case"price":this.isPositiveInteger(t)?this.products2[e.index]=Object(b["a"])({},this.editingCellRows[e.index]):e.preventDefault();break;default:t.trim().length>0?this.products2[e.index]=Object(b["a"])({},this.editingCellRows[e.index]):e.preventDefault();break}}},onCellEdit:function(e,t){this.editingCellRows[t.index]||(this.editingCellRows[t.index]=Object(b["a"])({},t.data)),this.editingCellRows[t.index][t.column.props.field]=e},isPositiveInteger:function(e){var t=String(e);if(t=t.trim(),!t)return!1;t=t.replace(/^0+/,"")||"0";var n=Math.floor(Number(t));return n!==1/0&&String(n)===t&&n>=0},onRowEditInit:function(e){this.originalRows[e.index]=Object(b["a"])({},this.products3[e.index])},onRowEditCancel:function(e){this.products3[e.index]=this.originalRows[e.index]},getStatusLabel:function(e){switch(e){case"INSTOCK":return"In Stock";case"LOWSTOCK":return"Low Stock";case"OUTOFSTOCK":return"Out of Stock";default:return"NA"}}},mounted:function(){var e=this;this.productService.getProductsSmall().then((function(t){return e.products1=t})),this.productService.getProductsSmall().then((function(t){return e.products2=t})),this.productService.getProductsSmall().then((function(t){return e.products3=t}))}};n("8d37");C.render=h,C.__scopeId="data-v-ce445f10";t["default"]=C},6714:function(e,t,n){var o=n("24fb");t=o(!1),t.push([e.i,"[data-v-ce445f10] .editable-cells-table td.p-cell-editing{padding-top:0;padding-bottom:0}",""]),e.exports=t},"8d37":function(e,t,n){"use strict";n("a17c")},a17c:function(e,t,n){var o=n("6714");o.__esModule&&(o=o.default),"string"===typeof o&&(o=[[e.i,o,""]]),o.locals&&(e.exports=o.locals);var l=n("499e").default;l("c5aba8a4",o,!0,{sourceMap:!1,shadowMode:!1})},e9c0:function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var o=n("d4ec"),l=n("bee2"),a=n("bc3a"),i=n.n(a),d=function(){function e(){Object(o["a"])(this,e)}return Object(l["a"])(e,[{key:"getProductsSmall",value:function(){return i.a.get("demo/data/products-small.json").then((function(e){return e.data.data}))}},{key:"getProducts",value:function(){return i.a.get("demo/data/products.json").then((function(e){return e.data.data}))}},{key:"getProductsWithOrdersSmall",value:function(){return i.a.get("demo/data/products-orders-small.json").then((function(e){return e.data.data}))}}]),e}()}}]);