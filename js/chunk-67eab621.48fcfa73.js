(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-67eab621"],{"79c1":function(e,n,t){"use strict";t.r(n);var l=t("7a23"),d={class:"content-section introduction"},o=Object(l["m"])("div",{class:"feature-intro"},[Object(l["m"])("h1",null,[Object(l["l"])("TreeTable "),Object(l["m"])("span",null,"Selection")]),Object(l["m"])("p",null,[Object(l["l"])("TreeTable supports "),Object(l["m"])("b",null,"single"),Object(l["l"])(", "),Object(l["m"])("b",null,"multiple"),Object(l["l"])(" and "),Object(l["m"])("b",null,"checkbox"),Object(l["l"])(" as selection modes.")])],-1),s={class:"content-section implementation"},c={class:"card"},a=Object(l["m"])("h5",null,"Single Selection",-1),i={class:"card"},r=Object(l["m"])("h5",null,"Multiple Selection with MetaKey",-1),u={class:"card"},m=Object(l["m"])("h5",null,"Multiple Selection without MetaKey",-1),y={class:"card"},b=Object(l["m"])("h5",null,"Checkbox Selection",-1),h={class:"card"},f=Object(l["m"])("h5",null,"Events",-1);function v(e,n,t,v,p,K){var T=Object(l["K"])("AppDemoActions"),S=Object(l["K"])("Column"),C=Object(l["K"])("TreeTable"),j=Object(l["K"])("AppDoc");return Object(l["C"])(),Object(l["h"])("div",null,[Object(l["m"])("div",d,[o,Object(l["m"])(T)]),Object(l["m"])("div",s,[Object(l["m"])("div",c,[a,Object(l["m"])(C,{value:p.nodes,selectionMode:"single",selectionKeys:p.selectedKey1,"onUpdate:selectionKeys":n[1]||(n[1]=function(e){return p.selectedKey1=e})},{default:Object(l["U"])((function(){return[Object(l["m"])(S,{field:"name",header:"Name",expander:!0}),Object(l["m"])(S,{field:"size",header:"Size"}),Object(l["m"])(S,{field:"type",header:"Type"})]})),_:1},8,["value","selectionKeys"])]),Object(l["m"])("div",i,[r,Object(l["m"])(C,{value:p.nodes,selectionMode:"multiple",selectionKeys:p.selectedKeys1,"onUpdate:selectionKeys":n[2]||(n[2]=function(e){return p.selectedKeys1=e})},{default:Object(l["U"])((function(){return[Object(l["m"])(S,{field:"name",header:"Name",expander:!0}),Object(l["m"])(S,{field:"size",header:"Size"}),Object(l["m"])(S,{field:"type",header:"Type"})]})),_:1},8,["value","selectionKeys"])]),Object(l["m"])("div",u,[m,Object(l["m"])(C,{value:p.nodes,selectionMode:"multiple",selectionKeys:p.selectedKeys2,"onUpdate:selectionKeys":n[3]||(n[3]=function(e){return p.selectedKeys2=e}),metaKeySelection:!1},{default:Object(l["U"])((function(){return[Object(l["m"])(S,{field:"name",header:"Name",expander:!0}),Object(l["m"])(S,{field:"size",header:"Size"}),Object(l["m"])(S,{field:"type",header:"Type"})]})),_:1},8,["value","selectionKeys"])]),Object(l["m"])("div",y,[b,Object(l["m"])(C,{value:p.nodes,selectionMode:"checkbox",selectionKeys:p.selectedKeys3,"onUpdate:selectionKeys":n[4]||(n[4]=function(e){return p.selectedKeys3=e})},{default:Object(l["U"])((function(){return[Object(l["m"])(S,{field:"name",header:"Name",expander:!0}),Object(l["m"])(S,{field:"size",header:"Size"}),Object(l["m"])(S,{field:"type",header:"Type"})]})),_:1},8,["value","selectionKeys"])]),Object(l["m"])("div",h,[f,Object(l["m"])(C,{value:p.nodes,selectionMode:"single",selectionKeys:p.selectedKey2,"onUpdate:selectionKeys":n[5]||(n[5]=function(e){return p.selectedKey2=e}),onNodeSelect:K.onNodeSelect,onNodeUnselect:K.onNodeUnselect},{default:Object(l["U"])((function(){return[Object(l["m"])(S,{field:"name",header:"Name",expander:!0}),Object(l["m"])(S,{field:"size",header:"Size"}),Object(l["m"])(S,{field:"type",header:"Type"})]})),_:1},8,["value","selectionKeys","onNodeSelect","onNodeUnselect"])])]),Object(l["m"])(j,{name:"TreeTableSelectionDemo",sources:p.sources,service:["NodeService"],data:["treetablenodes"],github:"treetable/TreeTableSelectionDemo.vue"},null,8,["sources"])])}t("b0c0");var p=t("82f4"),K={data:function(){return{selectedKey1:null,selectedKey2:null,selectedKeys1:null,selectedKeys2:null,selectedKeys3:null,nodes:null,sources:{"options-api":{tabName:"Options API Source",content:'\n<template>\n    <div>\n        <Toast />\n\n        <div class="card">\n            <h5>Single Selection</h5>\n            <TreeTable :value="nodes" selectionMode="single" v-model:selectionKeys="selectedKey1">\n                <Column field="name" header="Name" :expander="true"></Column>\n                <Column field="size" header="Size"></Column>\n                <Column field="type" header="Type"></Column>\n            </TreeTable>\n        </div>\n\n        <div class="card">\n            <h5>Multiple Selection with MetaKey</h5>\n            <TreeTable :value="nodes" selectionMode="multiple" v-model:selectionKeys="selectedKeys1">\n                <Column field="name" header="Name" :expander="true"></Column>\n                <Column field="size" header="Size"></Column>\n                <Column field="type" header="Type"></Column>\n            </TreeTable>\n        </div>\n\n        <div class="card">\n            <h5>Multiple Selection without MetaKey</h5>\n            <TreeTable :value="nodes" selectionMode="multiple" v-model:selectionKeys="selectedKeys2" :metaKeySelection="false">\n                <Column field="name" header="Name" :expander="true"></Column>\n                <Column field="size" header="Size"></Column>\n                <Column field="type" header="Type"></Column>\n            </TreeTable>\n        </div>\n\n        <div class="card">\n            <h5>Checkbox Selection</h5>\n            <TreeTable :value="nodes" selectionMode="checkbox" v-model:selectionKeys="selectedKeys3">\n                <Column field="name" header="Name" :expander="true"></Column>\n                <Column field="size" header="Size"></Column>\n                <Column field="type" header="Type"></Column>\n            </TreeTable>\n        </div>\n\n        <div class="card">\n            <h5>Events</h5>\n            <TreeTable :value="nodes" selectionMode="single" v-model:selectionKeys="selectedKey2"\n                @nodeSelect="onNodeSelect" @nodeUnselect="onNodeUnselect">\n                <Column field="name" header="Name" :expander="true"></Column>\n                <Column field="size" header="Size"></Column>\n                <Column field="type" header="Type"></Column>\n            </TreeTable>\n        </div>\n    </div>                    \n</template>\n\n<script>\nimport NodeService from \'./service/NodeService\';\n\nexport default {\n    data() {\n        return {\n            selectedKey1: null,\n            selectedKey2: null,\n            selectedKeys1: null,\n            selectedKeys2: null,\n            selectedKeys3: null,\n            nodes: null\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        onNodeSelect(node) {\n            this.$toast.add({severity:\'success\', summary: \'Node Selected\', detail: node.data.name, life: 3000});\n        },\n        onNodeUnselect(node) {\n            this.$toast.add({severity:\'success\', summary: \'Node Unselected\', detail: node.data.name, life: 3000});\n        }\n    }\n}\n<\\/script>\n'},"composition-api":{tabName:"Composition API Source",content:'\n<template>\n    <div>\n        <Toast />\n\n        <div class="card">\n            <h5>Single Selection</h5>\n            <TreeTable :value="nodes" selectionMode="single" v-model:selectionKeys="selectedKey1">\n                <Column field="name" header="Name" :expander="true"></Column>\n                <Column field="size" header="Size"></Column>\n                <Column field="type" header="Type"></Column>\n            </TreeTable>\n        </div>\n\n        <div class="card">\n            <h5>Multiple Selection with MetaKey</h5>\n            <TreeTable :value="nodes" selectionMode="multiple" v-model:selectionKeys="selectedKeys1">\n                <Column field="name" header="Name" :expander="true"></Column>\n                <Column field="size" header="Size"></Column>\n                <Column field="type" header="Type"></Column>\n            </TreeTable>\n        </div>\n\n        <div class="card">\n            <h5>Multiple Selection without MetaKey</h5>\n            <TreeTable :value="nodes" selectionMode="multiple" v-model:selectionKeys="selectedKeys2" :metaKeySelection="false">\n                <Column field="name" header="Name" :expander="true"></Column>\n                <Column field="size" header="Size"></Column>\n                <Column field="type" header="Type"></Column>\n            </TreeTable>\n        </div>\n\n        <div class="card">\n            <h5>Checkbox Selection</h5>\n            <TreeTable :value="nodes" selectionMode="checkbox" v-model:selectionKeys="selectedKeys3">\n                <Column field="name" header="Name" :expander="true"></Column>\n                <Column field="size" header="Size"></Column>\n                <Column field="type" header="Type"></Column>\n            </TreeTable>\n        </div>\n\n        <div class="card">\n            <h5>Events</h5>\n            <TreeTable :value="nodes" selectionMode="single" v-model:selectionKeys="selectedKey2"\n                @nodeSelect="onNodeSelect" @nodeUnselect="onNodeUnselect">\n                <Column field="name" header="Name" :expander="true"></Column>\n                <Column field="size" header="Size"></Column>\n                <Column field="type" header="Type"></Column>\n            </TreeTable>\n        </div>\n    </div>                    \n</template>\n\n<script>\nimport { ref, onMounted } from \'vue\';\nimport { useToast } from \'primevue/usetoast\';\nimport NodeService from \'./service/NodeService\';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            nodeService.value.getTreeTableNodes().then(data => nodes.value = data);\n        })\n\n        const toast = useToast();\n        const selectedKey1 = ref();\n        const selectedKey2 = ref();\n        const selectedKeys1 = ref();\n        const selectedKeys2 = ref();\n        const selectedKeys3 = ref();\n        const nodes = ref();\n        const nodeService = ref(new NodeService());\n        const onNodeSelect = (node) => {\n            toast.add({severity:\'success\', summary: \'Node Selected\', detail: node.data.name, life: 3000});\n        }\n        const onNodeUnselect = (node) => {\n            toast.add({severity:\'success\', summary: \'Node Unselected\', detail: node.data.name, life: 3000});\n        }\n\n        return { selectedKey1, selectedKey2, selectedKeys1, selectedKeys2, selectedKeys3, nodes, onNodeSelect, onNodeUnselect}\n    }\n}\n<\\/script>\n'}}}},nodeService:null,created:function(){this.nodeService=new p["a"]},mounted:function(){var e=this;this.nodeService.getTreeTableNodes().then((function(n){return e.nodes=n}))},methods:{onNodeSelect:function(e){this.$toast.add({severity:"success",summary:"Node Selected",detail:e.data.name,life:3e3})},onNodeUnselect:function(e){this.$toast.add({severity:"success",summary:"Node Unselected",detail:e.data.name,life:3e3})}}};K.render=v;n["default"]=K},"82f4":function(e,n,t){"use strict";t.d(n,"a",(function(){return c}));var l=t("d4ec"),d=t("bee2"),o=t("bc3a"),s=t.n(o),c=function(){function e(){Object(l["a"])(this,e)}return Object(d["a"])(e,[{key:"getTreeTableNodes",value:function(){return s.a.get("demo/data/treetablenodes.json").then((function(e){return e.data.root}))}},{key:"getTreeNodes",value:function(){return s.a.get("demo/data/treenodes.json").then((function(e){return e.data.root}))}}]),e}()}}]);