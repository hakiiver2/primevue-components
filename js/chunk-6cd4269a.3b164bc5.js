(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-6cd4269a"],{9261:function(e,t,n){"use strict";n.r(t);var a=n("7a23"),l={class:"content-section introduction"},r=Object(a["m"])("div",{class:"feature-intro"},[Object(a["m"])("h1",null,[Object(a["l"])("DataTable "),Object(a["m"])("span",null,"Lazy")]),Object(a["m"])("p",null,"Lazy mode is handy to deal with large datasets, instead of loading the entire data, small chunks of data is loaded by invoking corresponding callbacks everytime paging, sorting and filtering happens. Sample belows imitates lazy paging by using an in memory list. It is also important to assign the logical number of rows to totalRecords by doing a projection query for paginator configuration so that paginator displays the UI assuming there are actually records of totalRecords size although in reality they aren't as in lazy mode, only the records that are displayed on the current page exist. ")],-1),o={class:"content-section implementation"},i={class:"card"};function s(e,t,n,s,c,u){var d=Object(a["K"])("AppDemoActions"),m=Object(a["K"])("InputText"),f=Object(a["K"])("Column"),p=Object(a["K"])("DataTable"),y=Object(a["K"])("AppDoc");return Object(a["C"])(),Object(a["h"])("div",null,[Object(a["m"])("div",l,[r,Object(a["m"])(d)]),Object(a["m"])("div",o,[Object(a["m"])("div",i,[Object(a["m"])(p,{value:c.customers,lazy:!0,paginator:!0,rows:10,filters:c.filters,"onUpdate:filters":t[1]||(t[1]=function(e){return c.filters=e}),ref:"dt",totalRecords:c.totalRecords,loading:c.loading,onPage:t[2]||(t[2]=function(e){return u.onPage(e)}),onSort:t[3]||(t[3]=function(e){return u.onSort(e)}),onFilter:t[4]||(t[4]=function(e){return u.onFilter(e)}),filterDisplay:"row",globalFilterFields:["name","country.name","company","representative.name"],responsiveLayout:"scroll"},{default:Object(a["U"])((function(){return[Object(a["m"])(f,{field:"name",header:"Name",filterMatchMode:"startsWith",ref:"name",sortable:!0},{filter:Object(a["U"])((function(e){var t=e.filterModel,n=e.filterCallback;return[Object(a["m"])(m,{type:"text",modelValue:t.value,"onUpdate:modelValue":function(e){return t.value=e},onKeydown:Object(a["W"])((function(e){return n()}),["enter"]),class:"p-column-filter",placeholder:"Search by name"},null,8,["modelValue","onUpdate:modelValue","onKeydown"])]})),_:1},512),Object(a["m"])(f,{field:"country.name",header:"Country",filterField:"country.name",filterMatchMode:"contains",ref:"country.name",sortable:!0},{filter:Object(a["U"])((function(e){var t=e.filterModel,n=e.filterCallback;return[Object(a["m"])(m,{type:"text",modelValue:t.value,"onUpdate:modelValue":function(e){return t.value=e},onKeydown:Object(a["W"])((function(e){return n()}),["enter"]),class:"p-column-filter",placeholder:"Search by country"},null,8,["modelValue","onUpdate:modelValue","onKeydown"])]})),_:1},512),Object(a["m"])(f,{field:"company",header:"Company",filterMatchMode:"contains",ref:"company",sortable:!0},{filter:Object(a["U"])((function(e){var t=e.filterModel,n=e.filterCallback;return[Object(a["m"])(m,{type:"text",modelValue:t.value,"onUpdate:modelValue":function(e){return t.value=e},onKeydown:Object(a["W"])((function(e){return n()}),["enter"]),class:"p-column-filter",placeholder:"Search by company"},null,8,["modelValue","onUpdate:modelValue","onKeydown"])]})),_:1},512),Object(a["m"])(f,{field:"representative.name",header:"Representative",filterField:"representative.name",ref:"representative.name",sortable:!0},{filter:Object(a["U"])((function(e){var t=e.filterModel,n=e.filterCallback;return[Object(a["m"])(m,{type:"text",modelValue:t.value,"onUpdate:modelValue":function(e){return t.value=e},onKeydown:Object(a["W"])((function(e){return n()}),["enter"]),class:"p-column-filter",placeholder:"Search by representative"},null,8,["modelValue","onUpdate:modelValue","onKeydown"])]})),_:1},512)]})),_:1},8,["value","filters","totalRecords","loading","globalFilterFields"])])]),Object(a["m"])(y,{name:"DataTableLazyDemo",sources:c.sources,service:["CustomerService"],github:"datatable/DataTableLazyDemo.vue"},null,8,["sources"])])}var c=n("9fa9"),u={data:function(){return{loading:!1,totalRecords:0,customers:null,filters:{name:{value:"",matchMode:"contains"},"country.name":{value:"",matchMode:"contains"},company:{value:"",matchMode:"contains"},"representative.name":{value:"",matchMode:"contains"}},lazyParams:{},columns:[{field:"name",header:"Name"},{field:"country.name",header:"Country"},{field:"company",header:"Company"},{field:"representative.name",header:"Representative"}],sources:{"options-api":{tabName:"Options API Source",content:'\n<template>\n\t<div>\n        <DataTable :value="customers" :lazy="true" :paginator="true" :rows="10" v-model:filters="filters" ref="dt"\n            :totalRecords="totalRecords" :loading="loading" @page="onPage($event)" @sort="onSort($event)" @filter="onFilter($event)" filterDisplay="row"\n            :globalFilterFields="[\'name\',\'country.name\', \'company\', \'representative.name\']" responsiveLayout="scroll">\n            <Column field="name" header="Name" filterMatchMode="startsWith" ref="name" :sortable="true">  \n                <template #filter="{filterModel,filterCallback}">\n                    <InputText type="text" v-model="filterModel.value" @keydown.enter="filterCallback()" class="p-column-filter" placeholder="Search by name"/>\n                </template>                    \n            </Column>\n            <Column field="country.name" header="Country" filterField="country.name" filterMatchMode="contains" ref="country.name" :sortable="true">\n                <template #filter="{filterModel,filterCallback}">\n                    <InputText type="text" v-model="filterModel.value" @keydown.enter="filterCallback()" class="p-column-filter" placeholder="Search by country"/>\n                </template>\n            </Column>\n            <Column field="company" header="Company" filterMatchMode="contains" ref="company" :sortable="true">\n                <template #filter="{filterModel,filterCallback}">\n                    <InputText type="text" v-model="filterModel.value" @keydown.enter="filterCallback()" class="p-column-filter" placeholder="Search by company"/>\n                </template>\n            </Column>\n            <Column field="representative.name" header="Representative" filterField="representative.name" ref="representative.name" :sortable="true">\n                <template #filter="{filterModel,filterCallback}">\n                    <InputText type="text" v-model="filterModel.value" @keydown.enter="filterCallback()" class="p-column-filter" placeholder="Search by representative"/>\n                </template>\n            </Column>\n        </DataTable>\n\t</div>\n</template>\n\n<script>\nimport CustomerService from \'./service/CustomerService\';\n\nexport default {\n    data() {\n        return {\n            loading: false,\n            totalRecords: 0,\n            customers: null,\n            filters: {\n                \'name\': {value: \'\', matchMode: \'contains\'},\n                \'country.name\': {value: \'\', matchMode: \'contains\'},\n                \'company\': {value: \'\', matchMode: \'contains\'},\n                \'representative.name\': {value: \'\', matchMode: \'contains\'},\n            },\n            lazyParams: {},\n            columns: [\n                {field: \'name\', header: \'Name\'},\n                {field: \'country.name\', header: \'Country\'},\n                {field: \'company\', header: \'Company\'},\n                {field: \'representative.name\', header: \'Representative\'}\n            ]\n        }\n    },\n    customerService: null,\n    created() {\n        this.customerService = new CustomerService();\n    },\n    mounted() {\n        this.loading = true;\n        \n        this.lazyParams = {\n            first: 0,\n            rows: this.$refs.dt.rows,\n            sortField: null,\n            sortOrder: null,\n            filters: this.filters\n        };\n\n        this.loadLazyData();\n    },\n    methods: {\n        loadLazyData() {\n            this.loading = true;\n\n            setTimeout(() => {\n                this.customerService.getCustomers(\n                    {lazyEvent: JSON.stringify( this.lazyParams )})\n                        .then(data => {\n                            this.customers = data.customers;\n                            this.totalRecords = data.totalRecords;\n                            this.loading = false;\n                    }\n                );\n            }, Math.random() * 1000 + 250);\n        },\n        onPage(event) {\n            this.lazyParams = event;\n            this.loadLazyData();\n        },\n        onSort(event) {\n            this.lazyParams = event;\n            this.loadLazyData();\n        },\n        onFilter() {\n            this.loading = true;\n            this.lazyParams.filters = this.filters;\n            this.loadLazyData();\n        }\n    }\n}\n<\\/script>                  \n'},"composition-api":{tabName:"Composition API Source",content:'\n<template>\n\t<div>\n        <DataTable :value="customers" :lazy="true" :paginator="true" :rows="10" v-model:filters="filters" ref="dt"\n            :totalRecords="totalRecords" :loading="loading" @page="onPage($event)" @sort="onSort($event)" @filter="onFilter($event)" filterDisplay="row"\n            :globalFilterFields="[\'name\',\'country.name\', \'company\', \'representative.name\']" responsiveLayout="scroll">\n            <Column field="name" header="Name" filterMatchMode="startsWith" ref="name" :sortable="true">  \n                <template #filter="{filterModel,filterCallback}">\n                    <InputText type="text" v-model="filterModel.value" @keydown.enter="filterCallback()" class="p-column-filter" placeholder="Search by name"/>\n                </template>                    \n            </Column>\n            <Column field="country.name" header="Country" filterField="country.name" filterMatchMode="contains" ref="country.name" :sortable="true">\n                <template #filter="{filterModel,filterCallback}">\n                    <InputText type="text" v-model="filterModel.value" @keydown.enter="filterCallback()" class="p-column-filter" placeholder="Search by country"/>\n                </template>\n            </Column>\n            <Column field="company" header="Company" filterMatchMode="contains" ref="company" :sortable="true">\n                <template #filter="{filterModel,filterCallback}">\n                    <InputText type="text" v-model="filterModel.value" @keydown.enter="filterCallback()" class="p-column-filter" placeholder="Search by company"/>\n                </template>\n            </Column>\n            <Column field="representative.name" header="Representative" filterField="representative.name" ref="representative.name" :sortable="true">\n                <template #filter="{filterModel,filterCallback}">\n                    <InputText type="text" v-model="filterModel.value" @keydown.enter="filterCallback()" class="p-column-filter" placeholder="Search by representative"/>\n                </template>\n            </Column>\n        </DataTable>\n\t</div>\n</template>\n\n<script>\nimport { ref, onMounted } from \'vue\';\nimport CustomerService from \'./service/CustomerService\';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            loading.value = true;\n        \n            lazyParams.value = {\n                first: 0,\n                rows: dt.value.rows,\n                sortField: null,\n                sortOrder: null,\n                filters: filters.value\n            };\n\n            loadLazyData();\n        })\n\n        const dt = ref();\n        const loading = ref(false);\n        const totalRecords = ref(0);\n        const customers = ref();\n        const customerService = ref(new CustomerService());\n        const filters = ref({\n            \'name\': {value: \'\', matchMode: \'contains\'},\n            \'country.name\': {value: \'\', matchMode: \'contains\'},\n            \'company\': {value: \'\', matchMode: \'contains\'},\n            \'representative.name\': {value: \'\', matchMode: \'contains\'},\n        });\n        const lazyParams = ref({});\n        const columns = ref([\n            {field: \'name\', header: \'Name\'},\n            {field: \'country.name\', header: \'Country\'},\n            {field: \'company\', header: \'Company\'},\n            {field: \'representative.name\', header: \'Representative\'}\n        ]);\n\n        const loadLazyData = () => {\n            loading.value = true;\n\n            setTimeout(() => {\n                customerService.value.getCustomers(\n                    {lazyEvent: JSON.stringify( lazyParams.value )})\n                        .then(data => {\n                            customers.value = data.customers;\n                            totalRecords.value  = data.totalRecords;\n                            loading.value = false;\n                    }\n                );\n            }, Math.random() * 1000 + 250);\n        };\n        const onPage = (event) => {\n            lazyParams.value = event;\n            loadLazyData();\n        };\n        const onSort = (event) => {\n            lazyParams.value = event;\n            loadLazyData();\n        };\n        const onFilter = () => {\n            loading.value  = true;\n            lazyParams.value.filters = filters.value ;\n            loadLazyData();\n        }\n\n        return { dt, loading, totalRecords, customers, filters, lazyParams, columns, loadLazyData, onPage, onSort, onFilter }\n    }\n}\n<\\/script>                  \n'}}}},customerService:null,created:function(){this.customerService=new c["a"]},mounted:function(){this.loading=!0,this.lazyParams={first:0,rows:this.$refs.dt.rows,sortField:null,sortOrder:null,filters:this.filters},this.loadLazyData()},methods:{loadLazyData:function(){var e=this;this.loading=!0,setTimeout((function(){e.customerService.getCustomers({lazyEvent:JSON.stringify(e.lazyParams)}).then((function(t){e.customers=t.customers,e.totalRecords=t.totalRecords,e.loading=!1}))}),1e3*Math.random()+250)},onPage:function(e){this.lazyParams=e,this.loadLazyData()},onSort:function(e){this.lazyParams=e,this.loadLazyData()},onFilter:function(){this.loading=!0,this.lazyParams.filters=this.filters,this.loadLazyData()}}};u.render=s;t["default"]=u},"9fa9":function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var a=n("d4ec"),l=n("bee2"),r=n("bc3a"),o=n.n(r),i=function(){function e(){Object(a["a"])(this,e)}return Object(l["a"])(e,[{key:"getCustomersSmall",value:function(){return o.a.get("demo/data/customers-small.json").then((function(e){return e.data.data}))}},{key:"getCustomersMedium",value:function(){return o.a.get("demo/data/customers-medium.json").then((function(e){return e.data.data}))}},{key:"getCustomersLarge",value:function(){return o.a.get("demo/data/customers-large.json").then((function(e){return e.data.data}))}},{key:"getCustomersXLarge",value:function(){return o.a.get("demo/data/customers-xlarge.json").then((function(e){return e.data.data}))}},{key:"getCustomers",value:function(e){return o.a.get("https://www.primefaces.org/data/customers",{params:e}).then((function(e){return e.data}))}}]),e}()}}]);